{"version":3,"file":"cli.js","sourceRoot":"","sources":["cli.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from \"path\";\nimport * as fs from \"fs\";\nimport * as yaml from \"js-yaml\";\nimport * as diff from \"diff\";\n\nimport { fromYAMLFilePaths, getRuleFilePath } from \"./\";\nimport { indexToLineColumn } from \"./utils/content\";\n\nimport * as commandpost from \"commandpost\";\nconst pkg = require(\"../package.json\");\n\ninterface RootOpts {\n    rulesJson: boolean;\n    rulesYaml: boolean;\n    replace: boolean;\n    verify: boolean;\n    stdout: boolean;\n    diff: boolean;\n    verbose: boolean;\n    rules: string[];\n}\n\ninterface RootArgs {\n    files: string[];\n}\n\nconst root = commandpost\n    .create<RootOpts, RootArgs>(\"prh [files...]\")\n    .version(pkg.version, \"-v, --version\")\n    .option(\"--rules-json\", \"emit rule set in json format\")\n    .option(\"--rules-yaml\", \"emit rule set in yaml format\")\n    .option(\"--rules <path>\", \"path to rule yaml file\")\n    .option(\"--verify\", \"checking file validity\")\n    .option(\"--stdout\", \"print replaced content to stdout\")\n    .option(\"--diff\", \"show unified diff\")\n    .option(\"--verbose\", \"makes output more verbose\")\n    .option(\"-r, --replace\", \"replace input files\")\n    .action((opts, args) => {\n\n        if (opts.rulesJson || opts.rulesYaml) {\n            if (opts.verbose) {\n                console.warn(`processing ${process.cwd()} dir...`);\n            }\n            const engine = getEngineByTargetDir(process.cwd());\n            if (opts.rulesJson) {\n                console.log(JSON.stringify(engine, null, 2));\n                return;\n            } else if (opts.rulesYaml) {\n                console.log(yaml.dump(JSON.parse(JSON.stringify(engine, null, 2))));\n                return;\n            }\n        }\n\n        if (args.files.length === 0) {\n            throw new Error(\"files is required more than 1 argument\");\n        }\n\n        const invalidFiles: string[] = [];\n        args.files.forEach(filePath => {\n            if (opts.verbose) {\n                console.warn(`processing ${filePath}...`);\n            }\n            const content = fs.readFileSync(filePath, { encoding: \"utf8\" });\n            const engine = getEngineByTargetDir(path.dirname(filePath));\n            const changeSet = engine.makeChangeSet(filePath);\n            if (changeSet.diffs.length !== 0) {\n                invalidFiles.push(filePath);\n            }\n\n            if (opts.stdout) {\n                const result = changeSet.applyChangeSets(content);\n                process.stdout.write(result);\n\n            } else if (opts.diff) {\n                const result = changeSet.applyChangeSets(content);\n                const patch = diff.createPatch(filePath, content, result, \"before\", \"replaced\");\n                console.log(patch);\n\n            } else if (opts.replace) {\n                const result = changeSet.applyChangeSets(content);\n                if (content !== result) {\n                    fs.writeFileSync(filePath, result);\n                    console.warn(`replaced ${filePath}`);\n                }\n\n            } else {\n                changeSet.diffs.forEach(diff => {\n                    const before = changeSet.content.substr(diff.index, diff.tailIndex - diff.index);\n                    const after = diff.newText;\n                    if (after == null) {\n                        return;\n                    }\n                    const lineColumn = indexToLineColumn(diff.index, changeSet.content);\n                    console.log(`${changeSet.filePath}(${lineColumn.line + 1},${lineColumn.column + 1}): ${before} â†’ ${after}`);\n                });\n            }\n        });\n        if (opts.verify && invalidFiles.length !== 0) {\n            throw new Error(`${invalidFiles.join(\" ,\")} failed proofreading`);\n        }\n\n        function getEngineByTargetDir(targetDir: string) {\n            let rulePaths: string[];\n            if (opts.rules && opts.rules[0]) {\n                rulePaths = [...opts.rules];\n            } else {\n                const foundPath = getRuleFilePath(targetDir);\n                if (!foundPath) {\n                    throw new Error(`can't find rule file from ${targetDir}`);\n                }\n\n                rulePaths = [foundPath];\n            }\n\n            if (opts.verbose) {\n                rulePaths.forEach((path, i) => {\n                    console.warn(`  apply ${i + 1}: ${path}`);\n                });\n            }\n\n            return fromYAMLFilePaths(...rulePaths);\n        }\n    });\n\nroot\n    .subCommand<{}, {}>(\"init\")\n    .description(\"generate prh.yml\")\n    .action((_opts, _args) => {\n        fs.createReadStream(path.resolve(__dirname, \"../misc/prh.yml\")).pipe(fs.createWriteStream(\"prh.yml\"));\n        console.log(\"create prh.yml\");\n        console.log(\"see prh/rules collection https://github.com/prh/rules\");\n    });\n\ncommandpost\n    .exec(root, process.argv)\n    .catch(errorHandler);\n\nfunction errorHandler(err: any) {\n    if (err instanceof Error) {\n        console.error(err.stack);\n    } else {\n        console.error(err);\n    }\n    return Promise.resolve(null).then(() => {\n        process.exit(1);\n    });\n}\n"]}