{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from \"fs\";\nimport * as path from \"path\";\nimport * as yaml from \"js-yaml\";\n\nimport * as raw from \"./raw\";\nimport { Engine } from \"./engine\";\nimport { ChangeSet, Diff } from \"./changeset/\";\n\nexport { Engine, ChangeSet, Diff };\n\nexport function fromYAMLFilePaths(...configPaths: string[]): Engine {\n    const engine = fromYAMLFilePath(configPaths[0]);\n    configPaths.splice(1).forEach(path => {\n        engine.merge(fromYAMLFilePath(path));\n    });\n    return engine;\n}\n\nexport interface Options {\n    disableImports?: boolean;\n}\n\nexport function fromYAMLFilePath(configPath: string, opts: Options = {}): Engine {\n    const content = fs.readFileSync(configPath, { encoding: \"utf8\" });\n    return fromYAML(configPath, content, opts);\n}\n\nexport function fromYAML(configPath: string, yamlContent: string, opts: Options = {}): Engine {\n    const rawConfig = yaml.load(yamlContent);\n    return fromRowConfig(configPath, rawConfig, opts);\n}\n\nexport function fromRowConfig(configPath: string, rawConfig: raw.Config, opts: Options = {}): Engine {\n    const engine = new Engine(rawConfig);\n    engine.sourcePaths.push(path.normalize(configPath));\n\n    if (!opts.disableImports && rawConfig.imports) {\n        // TODO この辺の処理をEngine側に移したい\n        // なるべく破壊的変更を避ける\n        // fsやyamlを使わずに同等のEngineを組み立てる余地を残す\n        // async化したいけどprhの参照パッケージが壊れるのが辛い\n\n        let importSpecs: raw.ImportSpec[];\n        if (typeof rawConfig.imports === \"string\") {\n            importSpecs = [{\n                path: rawConfig.imports,\n            }];\n        } else {\n            importSpecs = rawConfig.imports.map(imp => {\n                if (typeof imp === \"string\") {\n                    return {\n                        path: imp,\n                    };\n                }\n                return imp;\n            });\n        }\n        importSpecs.forEach(importSpec => {\n            const importedConfigPath = path.join(path.dirname(configPath), importSpec.path);\n            const newEngine = fromYAMLFilePath(importedConfigPath, {\n                disableImports: !!importSpec.disableImports,\n            });\n\n            const ignoreRules = (importSpec.ignoreRules || []).map(ignoreRule => {\n                return typeof ignoreRule === \"string\" ? { pattern: ignoreRule } : ignoreRule;\n            });\n            newEngine.rules = newEngine.rules.filter(rule => {\n                return ignoreRules.every(ignoreRule => {\n                    return !rule._shouldIgnore(ignoreRule);\n                });\n            });\n\n            engine.merge(newEngine);\n        });\n    }\n\n    return engine;\n}\n\nexport function fromYAMLFilePathsAsync(...configPaths: string[]): Promise<Engine> {\n    try {\n        return Promise.resolve(fromYAMLFilePaths(...configPaths));\n    } catch (e) {\n        return Promise.reject(e);\n    }\n}\n\nexport function fromYAMLFilePathAsync(configPath: string, opts: Options = {}): Promise<Engine> {\n    try {\n        return Promise.resolve(fromYAMLFilePath(configPath, opts));\n    } catch (e) {\n        return Promise.reject(e);\n    }\n}\n\nexport function fromYAMLAsync(configPath: string, yamlContent: string, opts: Options = {}): Promise<Engine> {\n    try {\n        return Promise.resolve(fromYAML(configPath, yamlContent, opts));\n    } catch (e) {\n        return Promise.reject(e);\n    }\n}\n\nexport function fromRowConfigAsync(configPath: string, rawConfig: raw.Config, opts: Options = {}): Promise<Engine> {\n    try {\n        return Promise.resolve(fromRowConfig(configPath, rawConfig, opts));\n    } catch (e) {\n        return Promise.reject(e);\n    }\n}\n\nexport function getRuleFilePath(baseDir: string, configFileName = \"prh.yml\"): string | null {\n    const configFilePath = path.resolve(baseDir, configFileName);\n    if (fs.existsSync(configFilePath)) {\n        return configFilePath;\n    }\n\n    if (baseDir.length === path.dirname(baseDir).length) {\n        return null;\n    }\n\n    return getRuleFilePath(path.resolve(baseDir, \"../\"), configFileName);\n}\n"]}