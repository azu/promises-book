{"version":3,"file":"changeset.js","sourceRoot":"","sources":["changeset.ts"],"names":[],"mappings":"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","sourcesContent":["import { Diff } from \"./diff\";\n\nexport interface ChangeSetParams {\n    filePath?: string;\n    content: string;\n    diffs: Diff[];\n}\n\nexport class ChangeSet {\n    filePath?: string;\n    content: string;\n    diffs: Diff[];\n\n    constructor(params: ChangeSetParams) {\n        this.filePath = params.filePath;\n        this.content = params.content;\n        this.diffs = params.diffs;\n\n        this._prepare();\n    }\n\n    /* @internal */\n    _prepare() {\n        this.diffs = this.diffs.sort((a, b) => {\n            if (a.index !== b.index) {\n                return a.index - b.index;\n            }\n            return a.tailIndex - b.tailIndex;\n        });\n\n        // VSCodeのLSPでworkspace/applyEditを送った時に重複した範囲があるとエラーになる\n        // よって、重複する箇所のあるdiffを排除する必要がある\n        //   1. 同じindexからスタート→検出文字数が長い方を優先（より複雑なルール\n        this.diffs = this.diffs.filter((diff, idx) => {\n            const next = this.diffs[idx + 1];\n            if (!next) {\n                return true;\n            }\n            if (diff.index === next.index && diff.tailIndex < next.tailIndex) {\n                return false;\n            }\n            return true;\n        });\n        //   2. 異なるindexからスタート→indexが先の方を優先（先勝ち\n        this.diffs = this.diffs.filter((diff, idx) => {\n            const prev = this.diffs[idx - 1];\n            if (!prev) {\n                return true;\n            }\n            if (diff.index < prev.tailIndex) {\n                return false;\n            }\n            return true;\n        });\n    }\n\n    concat(other: ChangeSet): this {\n        this.diffs = this.diffs.concat(other.diffs);\n        this._prepare();\n        return this;\n    }\n\n    applyChangeSets(str: string): string {\n        this._prepare();\n\n        let delta = 0;\n        this.diffs.forEach(diff => {\n            const applied = diff.apply(str, delta);\n            if (applied == null) {\n                return;\n            }\n            str = applied.replaced;\n            delta = applied.newDelta;\n        });\n\n        return str;\n    }\n\n    subtract(subtrahend: ChangeSet): ChangeSet {\n        this._prepare();\n        subtrahend._prepare();\n\n        const result: ChangeSet = new ChangeSet({\n            filePath: this.filePath,\n            content: this.content,\n            diffs: this.diffs.map(v => v),\n        });\n        let m = 0;\n        let s = 0;\n\n        while (true) {\n            const minuendDiff = result.diffs[m];\n            const subtrahendDiff = subtrahend.diffs[s];\n\n            if (!minuendDiff || !subtrahendDiff) {\n                break;\n            }\n            if (!minuendDiff.isEncloser(subtrahendDiff) && minuendDiff.isCollide(subtrahendDiff)) {\n                result.diffs.splice(m, 1);\n                continue;\n            }\n            if (minuendDiff.isBefore(subtrahendDiff)) {\n                m++;\n            } else {\n                s++;\n            }\n        }\n\n        return result;\n    }\n\n    intersect(audit: ChangeSet): ChangeSet {\n        this._prepare();\n        audit._prepare();\n\n        const result: ChangeSet = new ChangeSet({\n            filePath: this.filePath,\n            content: this.content,\n            diffs: [],\n        });\n        let a = 0;\n        let b = 0;\n\n        while (true) {\n            const baseDiff = this.diffs[a];\n            const auditDiff = audit.diffs[b];\n            if (!baseDiff || !auditDiff) {\n                break;\n            }\n            if (baseDiff.isCollide(auditDiff) && result.diffs.indexOf(baseDiff) === -1) {\n                result.diffs.push(baseDiff);\n            }\n            if (baseDiff.isBefore(auditDiff)) {\n                a++;\n            } else {\n                b++;\n            }\n        }\n\n        return result;\n    }\n}\n"]}