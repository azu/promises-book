{"version":3,"file":"diff.js","sourceRoot":"","sources":["diff.ts"],"names":[],"mappings":"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","sourcesContent":["import { Rule } from \"../rule\";\n\nexport interface DiffParams {\n    pattern: RegExp;\n    expected?: string; // replaceが必要ないパターンの時渡されない場合がある\n    index: number;\n    matches: string[];\n    rule?: Rule;\n}\n\nexport class Diff {\n    pattern: RegExp;\n    expected?: string;\n    index: number;\n    matches: string[];\n    /** @internal */\n    _newText?: string;\n    rule?: Rule;\n\n    constructor(params: DiffParams) {\n        this.pattern = params.pattern;\n        this.expected = params.expected;\n        this.index = params.index;\n        this.matches = params.matches;\n        this.rule = params.rule;\n    }\n\n    get tailIndex() {\n        return this.index + this.matches[0].length;\n    }\n\n    get newText(): string | null {\n        if (this._newText != null) {\n            return this._newText;\n        }\n\n        if (this.expected == null) {\n            return null;\n        }\n\n        const result = this.expected.replace(/\\$([0-9]{1,2})/g, (match: string, g1: string) => {\n            const index = parseInt(g1, 10);\n            if (index === 0 || (this.matches.length - 1) < index) {\n                return match;\n            }\n            return this.matches[index] || \"\";\n        });\n        this._newText = result;\n        return this._newText;\n    }\n\n    /**\n     * Diffの結果を元の文章に反映する\n     * @param content 置き換えたいコンテンツ\n     * @param delta diffの処理対象の地点がいくつズレているか 複数diffを順次適用する場合に必要\n     */\n    apply(content: string, delta = 0): { replaced: string; newDelta: number; } | null {\n        if (this.newText == null) {\n            return null;\n        }\n        content = content.slice(0, this.index + delta) + this.newText + content.slice(this.index + delta + this.matches[0].length);\n        delta += this.newText.length - this.matches[0].length;\n\n        return {\n            replaced: content,\n            newDelta: delta,\n        };\n    }\n\n    isEncloser(other: { index: number; tailIndex: number; }) {\n        return this.index < other.index && other.tailIndex < this.tailIndex;\n    }\n\n    isCollide(other: { index: number; tailIndex: number; }) {\n        if (other.index < this.index && this.index < other.tailIndex) {\n            return true;\n        }\n        if (this.index < other.index && other.index < this.tailIndex) {\n            return true;\n        }\n        return false;\n    }\n\n    isBefore(other: { index: number; }) {\n        return this.index < other.index;\n    }\n\n    toJSON() {\n        const result: any = {};\n        Object.keys(this).forEach(key => {\n            if (key[0] === \"_\") {\n                return;\n            }\n            const value = (this as any)[key];\n            if (value instanceof RegExp) {\n                result[key] = `/${value.source}/${value.flags}`;\n            } else {\n                result[key] = value;\n            }\n        });\n        return result;\n    }\n}\n"]}