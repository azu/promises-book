{"version":3,"file":"engine.js","sourceRoot":"","sources":["engine.ts"],"names":[],"mappings":";;AAAA,uBAAyB;AAEzB,yCAAwC;AAGxC,yCAAwC;AACxC,mCAAkC;AAClC,+BAA8B;AAC9B,yCAAuD;AAEvD;IAMI,gBAAY,GAAe;QACvB,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACP,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;QACvC,CAAC;QACD,IAAI,CAAC,OAAO,GAAG,CAAC,GAAG,CAAC,OAAO,IAAI,CAAC,CAAC;QACjC,IAAI,CAAC,OAAO,GAAG,CAAC,GAAG,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,IAAI,eAAM,CAAC,MAAM,CAAC,EAAlB,CAAkB,CAAC,CAAC;QACrE,IAAI,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,WAAI,CAAC,IAAI,CAAC,EAAd,CAAc,CAAC,CAAC;QAC3D,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;IAC1B,CAAC;IAED,sBAAK,GAAL,UAAM,KAAa;QAAnB,iBAwBC;QAvBG,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACT,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;QACzC,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,KAAK,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;YACjC,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;QACzC,CAAC;QACD,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,UAAA,UAAU;YAChC,IAAM,MAAM,GAAG,KAAI,CAAC,WAAW,CAAC,MAAM,CAAC,UAAA,eAAe,IAAI,OAAA,eAAe,KAAK,UAAU,EAA9B,CAA8B,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC;YACvG,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACV,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACtC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,WAAW;YAC7B,IAAM,MAAM,GAAG,KAAI,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,eAAM,CAAC,MAAM,CAAC,IAAI,EAAE,WAAW,CAAC,IAAI,CAAC,EAArC,CAAqC,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC;YACjG,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACV,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACnC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,uEAAuE;QACvE,IAAM,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,UAAA,SAAS;YACzC,MAAM,CAAC,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,QAAQ,KAAK,SAAS,CAAC,QAAQ,EAApC,CAAoC,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC;QACxF,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAC7C,CAAC;IAED,8BAAa,GAAb,UAAc,QAAgB,EAAE,WAAoB;QAApD,iBA4DC;QA3DG,IAAM,OAAO,GAAW,WAAW,IAAI,IAAI,GAAG,WAAW,GAAG,EAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC;QAE5G,IAAM,EAAE,GAAG,gBAAgB,CAAC;QAC5B,IAAM,UAAU,GAAgB,EAAE,CAAC;QACnC,CAAC;YACG,IAAI,SAAS,GAAG,CAAC,CAAC;YAClB,OAAO,IAAI,EAAE,CAAC;gBACV,IAAM,OAAO,GAAG,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACjC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;oBACX,UAAU,CAAC,IAAI,CAAC,IAAI,qBAAS,CAAC,SAAS,EAAE,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;oBACrE,KAAK,CAAC;gBACV,CAAC;gBACD,UAAU,CAAC,IAAI,CAAC,IAAI,qBAAS,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC1D,SAAS,GAAG,EAAE,CAAC,SAAS,CAAC;YAC7B,CAAC;QACL,CAAC;QAED,IAAM,KAAK,GAAG,UAAU,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,SAAS,CAAC,KAAI,CAAC,KAAK,CAAC,EAAvB,CAAuB,CAAC,CAAC,MAAM,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAX,CAAW,EAAE,EAAE,CAAC,CAAC;QAC7F,IAAI,SAAS,GAAG,IAAI,qBAAS,CAAC,EAAE,QAAQ,UAAA,EAAE,OAAO,SAAA,EAAE,KAAK,OAAA,EAAE,CAAC,CAAC;QAE5D,IAAI,QAAQ,GAAqB,IAAI,CAAC;QACtC,IAAI,QAAQ,GAAqB,IAAI,CAAC;QACtC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;YACvB,MAAM,CAAC,KAAK,EAAE,CAAC;YACf,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBAC9B,MAAM,CAAC;YACX,CAAC;YACD,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC/B,yCAAyC;gBACzC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,OAAO;oBAC3B,IAAM,SAAS,GAAG,yBAAa,CAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;oBACpE,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;wBACX,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;oBAC1C,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,QAAQ,GAAG,SAAS,CAAC;oBACzB,CAAC;gBACL,CAAC,CAAC,CAAC;YACP,CAAC;YACD,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC/B,+BAA+B;gBAC/B,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,OAAO;oBAC3B,IAAM,QAAQ,GAAG,yBAAa,CAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;oBACnE,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;wBACX,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;oBACzC,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,QAAQ,GAAG,QAAQ,CAAC;oBACxB,CAAC;gBACL,CAAC,CAAC,CAAC;YACP,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACX,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAC9C,CAAC;QACD,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACX,SAAS,GAAG,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAC7C,CAAC;QAED,MAAM,CAAC,SAAS,CAAC;IACrB,CAAC;IAED,8BAAa,GAAb,UAAc,QAAgB,EAAE,OAAgB;QAC5C,EAAE,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC;YAClB,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC;QAC9D,CAAC;QACD,IAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QACxD,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;IAC9C,CAAC;IACL,aAAC;AAAD,CAAC,AA/GD,IA+GC;AA/GY,wBAAM","sourcesContent":["import * as fs from \"fs\";\n\nimport { equals } from \"./utils/regexp\";\n\nimport * as raw from \"./raw\";\nimport { Paragraph } from \"./paragraph\";\nimport { Target } from \"./target\";\nimport { Rule } from \"./rule\";\nimport { makeChangeSet, ChangeSet } from \"./changeset\";\n\nexport class Engine {\n    version: number;\n    targets: Target[];\n    rules: Rule[];\n    sourcePaths: string[]; // NOTE ソースとなったファイルのパス\n\n    constructor(src: raw.Config) {\n        if (!src) {\n            throw new Error(\"src is requried\");\n        }\n        this.version = +src.version || 1;\n        this.targets = (src.targets || []).map(target => new Target(target));\n        this.rules = (src.rules || []).map(rule => new Rule(rule));\n        this.sourcePaths = [];\n    }\n\n    merge(other: Engine) {\n        if (!other) {\n            throw new Error(\"other is required\");\n        }\n        if (this.version !== other.version) {\n            throw new Error(\"version mismatch!\");\n        }\n        other.sourcePaths.forEach(sourcePath => {\n            const exists = this.sourcePaths.filter(otherSourcePath => otherSourcePath === sourcePath).length !== 0;\n            if (!exists) {\n                this.sourcePaths.push(sourcePath);\n            }\n        });\n        other.targets.forEach(otherTarget => {\n            const exists = this.targets.filter(target => equals(target.file, otherTarget.file)).length !== 0;\n            if (!exists) {\n                this.targets.push(otherTarget);\n            }\n        });\n        // NOTE https://github.com/vvakame/prh/issues/18#issuecomment-222524140\n        const reqRules = other.rules.filter(otherRule => {\n            return this.rules.filter(rule => rule.expected === otherRule.expected).length === 0;\n        });\n        this.rules = this.rules.concat(reqRules);\n    }\n\n    makeChangeSet(filePath: string, contentText?: string): ChangeSet {\n        const content: string = contentText != null ? contentText : fs.readFileSync(filePath, { encoding: \"utf8\" });\n\n        const re = /([^]*?)\\n{2,}/g;\n        const paragraphs: Paragraph[] = [];\n        {\n            let lastIndex = 0;\n            while (true) {\n                const matches = re.exec(content);\n                if (!matches) {\n                    paragraphs.push(new Paragraph(lastIndex, content.substr(lastIndex)));\n                    break;\n                }\n                paragraphs.push(new Paragraph(matches.index, matches[1]));\n                lastIndex = re.lastIndex;\n            }\n        }\n\n        const diffs = paragraphs.map(p => p.makeDiffs(this.rules)).reduce((p, c) => p.concat(c), []);\n        let changeSet = new ChangeSet({ filePath, content, diffs });\n\n        let includes: ChangeSet | null = null;\n        let excludes: ChangeSet | null = null;\n        this.targets.forEach(target => {\n            target.reset();\n            if (!target.file.test(filePath)) {\n                return;\n            }\n            if (target.includes.length !== 0) {\n                // .ts の // の後や /* */ の内部だけ対象にしたい場合のための機能\n                target.includes.forEach(include => {\n                    const intersect = makeChangeSet(filePath, content, include.pattern);\n                    if (includes) {\n                        includes = includes.concat(intersect);\n                    } else {\n                        includes = intersect;\n                    }\n                });\n            }\n            if (target.excludes.length !== 0) {\n                // .re の #@ の後を対象にしたくない場合のための機能\n                target.excludes.forEach(exclude => {\n                    const subsract = makeChangeSet(filePath, content, exclude.pattern);\n                    if (excludes) {\n                        excludes = excludes.concat(subsract);\n                    } else {\n                        excludes = subsract;\n                    }\n                });\n            }\n        });\n\n        if (includes) {\n            changeSet = changeSet.intersect(includes);\n        }\n        if (excludes) {\n            changeSet = changeSet.subtract(excludes);\n        }\n\n        return changeSet;\n    }\n\n    replaceByRule(filePath: string, content?: string) {\n        if (content == null) {\n            content = fs.readFileSync(filePath, { encoding: \"utf8\" });\n        }\n        const changeSet = this.makeChangeSet(filePath, content);\n        return changeSet.applyChangeSets(content);\n    }\n}\n"]}