{"version":3,"sources":["../src/ASTSource.js"],"names":["debug","require","defaultOptions","filePath","disableSourceMap","parserType","esprimaTokens","loc","range","comment","validateCode","code","validateOptions","options","ASTSource","parser","ASTParser","generator","ASTGenerator","dataContainer","ASTDataContainer","parse","value","cloneValue","transformFn","transform","transformStrict","ASTOutput","generateCode","generateCodeWithMap","sourceContent","map"],"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,WAAjB,CAAZ;AACA;;;;;;;;;;;;AAUA,IAAMC,cAAc,GAAG;AACnBC,EAAAA,QAAQ,EAAE,IADS;AAEnBC,EAAAA,gBAAgB,EAAE,KAFC;AAGnBC,EAAAA,UAAU,EAAE,IAHO;AAInBC,EAAAA,aAAa,EAAE,IAJI;AAKnBC,EAAAA,GAAG,EAAE,IALc;AAMnBC,EAAAA,KAAK,EAAE,IANY;AAOnBC,EAAAA,OAAO,EAAE;AAPU,CAAvB;;AASO,SAASC,YAAT,CAAsBC,IAAtB,EAA4B;AAC/B,uBAAO,OAAOA,IAAP,KAAgB,WAAvB;AACH;;AACM,SAASC,eAAT,CAAyBC,OAAzB,EAAkC;AACrC,MAAI,CAACA,OAAO,CAACT,gBAAb,EAA+B;AAC3B,yBAAO,OAAOS,OAAO,CAACV,QAAf,KAA4B,QAAnC,EAA6C,sDAA7C;AACH;AACJ;;IACoBW,S;;;AACjB,qBAAYH,IAAZ,EAAkBE,OAAlB,EAA2B;AAAA;;AACvB,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKE,OAAL,GAAe,2BAAa,EAAb,EAAiBX,cAAjB,EAAiCW,OAAjC,CAAf;AACAH,IAAAA,YAAY,CAACC,IAAD,CAAZ;AACAC,IAAAA,eAAe,CAAC,KAAKC,OAAN,CAAf;AACA,SAAKE,MAAL,GAAc,IAAIC,kBAAJ,CAAc,KAAKH,OAAnB,CAAd;AACA,SAAKI,SAAL,GAAiB,IAAIC,qBAAJ,CAAiB,KAAKL,OAAtB,CAAjB;AACA;;AACA,SAAKM,aAAL,GAAqB,IAAIC,yBAAJ,CAAqB,KAAKC,KAAL,CAAW,KAAKV,IAAhB,CAArB,CAArB;AACAX,IAAAA,KAAK,CAAC,aAAD,EAAgB,KAAKa,OAArB,CAAL;AACH;;;;4BAEO;AACJ,aAAO,KAAKM,aAAL,CAAmBG,KAA1B;AACH;AAED;;;;;;;iCAIa;AACT,aAAO,KAAKH,aAAL,CAAmBI,UAAnB,EAAP;AACH;;;0BAEKZ,I,EAAM;AACR,aAAO,KAAKI,MAAL,CAAYM,KAAZ,CAAkBV,IAAlB,CAAP;AACH;AAED;;;;;;;;;;;;8BASUa,W,EAAa;AACnB,WAAKL,aAAL,CAAmBM,SAAnB,CAA6BD,WAA7B;AACA,aAAO,IAAP;AACH;AAED;;;;;;;oCAIgBA,W,EAAa;AACzB,WAAKL,aAAL,CAAmBO,eAAnB,CAAmCF,WAAnC,EAAgD,KAAKX,OAArD;AACA,aAAO,IAAP;AACH;AAED;;;;;;6BAGS;AACL;AACA,UAAI,KAAKA,OAAL,CAAaT,gBAAjB,EAAmC;AAC/B,eAAO,IAAIuB,kBAAJ,CAAc,KAAKV,SAAL,CAAeW,YAAf,CAA4B,KAAKT,aAAL,CAAmBG,KAA/C,CAAd,CAAP;AACH;;AAJI,kCAKe,KAAKL,SAAL,CAAeY,mBAAf,CAAmC,KAAKV,aAAL,CAAmBG,KAAtD,EAA6D;AAC7EQ,QAAAA,aAAa,EAAE,KAAKnB;AADyD,OAA7D,CALf;AAAA,UAKCA,IALD,yBAKCA,IALD;AAAA,UAKOoB,GALP,yBAKOA,GALP;;AAQL,aAAO,IAAIJ,kBAAJ,CAAchB,IAAd,EAAoBoB,GAApB,CAAP;AACH","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport assert from \"assert\";\nimport ASTParser from \"./ASTParser\";\nimport ASTGenerator from \"./ASTGenerator\";\nimport ASTOutput from \"./ASTOutput\";\nimport ObjectAssign from \"object-assign\";\nexport { ParserTypes } from \"./utils/find-parser\";\nimport ASTDataContainer from \"./ASTDataContainer\";\nexport { ASTDataContainer };\nvar debug = require(\"debug\")(\"ASTSource\");\n/**\n * @type {Object} ASTSourceOptions\n * @property {string} ASTSourceOptions.filePath? path to source code\n * @property {string} ASTSourceOptions.sourceRoot? source root path to source code\n * @property {parserType} ASTSourceOptions.parserType? what parser is used\n * @property {boolean} ASTSourceOptions.esprimaTokens? tokens\n * @property {boolean} ASTSourceOptions.range? range\n * @property {boolean} ASTSourceOptions.loc? location\n * @property {boolean} ASTSourceOptions.comment?\n */\nconst defaultOptions = {\n    filePath: null,\n    disableSourceMap: false,\n    parserType: null,\n    esprimaTokens: true,\n    loc: true,\n    range: true,\n    comment: true\n};\nexport function validateCode(code) {\n    assert(typeof code !== \"undefined\");\n}\nexport function validateOptions(options) {\n    if (!options.disableSourceMap) {\n        assert(typeof options.filePath === \"string\", \"`options.filePath` is required for sourcemap support\");\n    }\n}\nexport default class ASTSource {\n    constructor(code, options) {\n        this.code = code;\n        this.options = ObjectAssign({}, defaultOptions, options);\n        validateCode(code);\n        validateOptions(this.options);\n        this.parser = new ASTParser(this.options);\n        this.generator = new ASTGenerator(this.options);\n        /** @type {Object} AST object */\n        this.dataContainer = new ASTDataContainer(this.parse(this.code));\n        debug(\"options: %o\", this.options);\n    }\n\n    value() {\n        return this.dataContainer.value;\n    }\n\n    /**\n     * return cloned AST\n     * @return {Object}\n     */\n    cloneValue() {\n        return this.dataContainer.cloneValue();\n    }\n\n    parse(code) {\n        return this.parser.parse(code);\n    }\n\n    /**\n     * transform AST by transformFn.\n     * @param {function} transformFn\n     * @example\n     * function transformFn(AST){\n     *    return modify(AST)\n     * }\n     * source.transform(transformFn);\n     */\n    transform(transformFn) {\n        this.dataContainer.transform(transformFn);\n        return this;\n    }\n\n    /**\n     * transform AST after healing the AST.\n     * @param {function} transformFn\n     */\n    transformStrict(transformFn) {\n        this.dataContainer.transformStrict(transformFn, this.options);\n        return this;\n    }\n\n    /**\n     * @returns {ASTOutput}\n     */\n    output() {\n        // when sourcemap is disable, only generate code\n        if (this.options.disableSourceMap) {\n            return new ASTOutput(this.generator.generateCode(this.dataContainer.value));\n        }\n        var { code, map } = this.generator.generateCodeWithMap(this.dataContainer.value, {\n            sourceContent: this.code\n        });\n        return new ASTOutput(code, map);\n    }\n}\n"],"file":"ASTSource.js"}