{"version":3,"sources":["../src/ASTDataContainer.js"],"names":["ASTDataContainer","ast","value","transformFn","result","Error","options","AST"],"mappings":"AAAA;AACA;;;;;;;AACA;;AACA;;AACA;;;;;;;;;;;;AACA;;;IAGqBA,gB;;;AACjB;;;;AAIA,4BAAYC,GAAZ,EAAiB;AAAA;;AACb,SAAKC,KAAL,GAAaD,GAAb;AACH;;;;iCAEY;AACT,aAAO,uBAAS,KAAKC,KAAd,CAAP;AACH;;;8BAESC,W,EAAa;AACnB,UAAMC,MAAM,GAAGD,WAAW,CAAC,KAAKD,KAAN,CAA1B;;AACA,UAAIE,MAAM,IAAI,IAAd,EAAoB;AAChB,cAAM,IAAIC,KAAJ,CAAU,2CAAV,CAAN;AACH;;AACD,WAAKH,KAAL,GAAaE,MAAb;AACH;AAED;;;;;;;oCAIgBD,W,EAAaG,O,EAAS;AAClC,UAAIC,GAAG,GAAG,gCAAW,KAAKL,KAAhB,EAAuBI,OAAvB,CAAV;AACA,UAAIF,MAAM,GAAGD,WAAW,CAACI,GAAD,CAAxB;AACA,2BAAOH,MAAM,IAAI,IAAV,IAAkB,QAAOA,MAAP,MAAkB,QAA3C,EAAqD,2CAArD;AACA,WAAKF,KAAL,GAAaE,MAAb;AACH","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport assert from \"assert\";\nimport espurify from \"espurify\";\nimport { healingAST } from \"./utils/ast-healing-util\";\n/**\n * ASTDataContainer has AST as `value` and transform `value`\n */\nexport default class ASTDataContainer {\n    /**\n     *\n     * @param {Object} ast\n     */\n    constructor(ast) {\n        this.value = ast;\n    }\n\n    cloneValue() {\n        return espurify(this.value);\n    }\n\n    transform(transformFn) {\n        const result = transformFn(this.value);\n        if (result == null) {\n            throw new Error(\"transform function should not return null\");\n        }\n        this.value = result;\n    }\n\n    /**\n     * @param transformFn\n     * @param {ASTSourceOptions} options\n     */\n    transformStrict(transformFn, options) {\n        var AST = healingAST(this.value, options);\n        var result = transformFn(AST);\n        assert(result != null && typeof result === \"object\", \"transform function should not return null\");\n        this.value = result;\n    }\n}\n"],"file":"ASTDataContainer.js"}