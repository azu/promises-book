// LICENSE : MIT
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findParserType = findParserType;
exports.ParserTypes = void 0;

var _objectAssign = _interopRequireDefault(require("object-assign"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ParserTypes = {
  // https://github.com/babel/babel/tree/master/packages/babylon aka. using by Babel
  Babylon: "Babylon",
  Esprima: "Esprima",
  Unknown: "Unknown"
};
exports.ParserTypes = ParserTypes;

function isBabylon(dependecies) {
  if (!dependecies) {
    return false;
  }

  var keys = Object.keys(dependecies);
  var matchName = /^babel|^babylon/i;
  return keys.some(function (key) {
    return matchName.test(key);
  });
}

function findParserType(options) {
  // default parser: esprima
  if (options.parserType) {
    return options.parserType;
  } else {
    return ParserTypes.Esprima;
  }
}
//# sourceMappingURL=find-parser.js.map