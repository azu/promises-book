// LICENSE : MIT
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _convertSourceMap = _interopRequireDefault(require("convert-source-map"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var ASTOutput =
/*#__PURE__*/
function () {
  function ASTOutput(code, map) {
    _classCallCheck(this, ASTOutput);

    this._code = code;
    this._map = map;
  }

  _createClass(ASTOutput, [{
    key: "code",
    get: function get() {
      return this._code;
    }
  }, {
    key: "map",
    get: function get() {
      return this._map;
    }
  }, {
    key: "codeWithMap",
    get: function get() {
      if (!this._map) {
        return this._code;
      }

      return this.code + "\n" + _convertSourceMap.default.fromObject(this.map).toComment();
    }
  }]);

  return ASTOutput;
}();

exports.default = ASTOutput;
//# sourceMappingURL=ASTOutput.js.map