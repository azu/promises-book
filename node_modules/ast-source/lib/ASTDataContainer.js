// LICENSE : MIT
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _assert = _interopRequireDefault(require("assert"));

var _espurify = _interopRequireDefault(require("espurify"));

var _astHealingUtil = require("./utils/ast-healing-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * ASTDataContainer has AST as `value` and transform `value`
 */
var ASTDataContainer =
/*#__PURE__*/
function () {
  /**
   *
   * @param {Object} ast
   */
  function ASTDataContainer(ast) {
    _classCallCheck(this, ASTDataContainer);

    this.value = ast;
  }

  _createClass(ASTDataContainer, [{
    key: "cloneValue",
    value: function cloneValue() {
      return (0, _espurify.default)(this.value);
    }
  }, {
    key: "transform",
    value: function transform(transformFn) {
      var result = transformFn(this.value);

      if (result == null) {
        throw new Error("transform function should not return null");
      }

      this.value = result;
    }
    /**
     * @param transformFn
     * @param {ASTSourceOptions} options
     */

  }, {
    key: "transformStrict",
    value: function transformStrict(transformFn, options) {
      var AST = (0, _astHealingUtil.healingAST)(this.value, options);
      var result = transformFn(AST);
      (0, _assert.default)(result != null && _typeof(result) === "object", "transform function should not return null");
      this.value = result;
    }
  }]);

  return ASTDataContainer;
}();

exports.default = ASTDataContainer;
//# sourceMappingURL=ASTDataContainer.js.map