{"version":3,"sources":["../src/babel-parse-to-esprima.js"],"names":["parse","require","acornToEsprima","parseToEsprima","code","opts","comments","onComment","tokens","onToken","ast","err","pop","comment","i","length","type","esprimaTokens","toTokens","toAST"],"mappings":"AAAA;AACA;;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAAP,CAAmBD,KAAjC;;AACA,IAAME,cAAc,GAAGD,OAAO,CAAC,kBAAD,CAA9B;;AACO,SAASE,cAAT,CAAwBC,IAAxB,EAA8BC,IAA9B,EAAoC;AACvC,MAAIC,QAAQ,GAAID,IAAI,CAACE,SAAL,GAAiB,EAAjC;AACA,MAAIC,MAAM,GAAIH,IAAI,CAACI,OAAL,GAAe,EAA7B;AAEA,MAAIC,GAAJ;;AACA,MAAI;AACAA,IAAAA,GAAG,GAAGV,KAAK,CAACI,IAAD,EAAOC,IAAP,CAAX;AACH,GAFD,CAEE,OAAOM,GAAP,EAAY;AACV,UAAMA,GAAN;AACH;;AAEDH,EAAAA,MAAM,CAACI,GAAP;;AACA,MAAIP,IAAI,CAACQ,OAAT,EAAkB;AACd;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,QAAQ,CAACS,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtC,UAAID,OAAO,GAAGP,QAAQ,CAACQ,CAAD,CAAtB;;AACA,UAAID,OAAO,CAACG,IAAR,KAAiB,cAArB,EAAqC;AACjCH,QAAAA,OAAO,CAACG,IAAR,GAAe,OAAf;AACH,OAFD,MAEO,IAAIH,OAAO,CAACG,IAAR,KAAiB,aAArB,EAAoC;AACvCH,QAAAA,OAAO,CAACG,IAAR,GAAe,MAAf;AACH;AACJ;;AACDN,IAAAA,GAAG,CAACJ,QAAJ,GAAeA,QAAf;AACH,GAvBsC,CAwBvC;;;AACA,MAAID,IAAI,CAACY,aAAT,EAAwB;AACpB;AACAP,IAAAA,GAAG,CAACF,MAAJ,GAAaN,cAAc,CAACgB,QAAf,CAAwBV,MAAxB,CAAb;AACAN,IAAAA,cAAc,CAACQ,GAAD,EAAMJ,QAAN,EAAgBI,GAAG,CAACF,MAApB,CAAd,CAHoB,CAKpB;;AACAN,IAAAA,cAAc,CAACiB,KAAf,CAAqBT,GAArB;AACH;;AACD,SAAOA,GAAP;AACH","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n\nconst parse = require(\"babylon\").parse;\nconst acornToEsprima = require(\"acorn-to-esprima\");\nexport function parseToEsprima(code, opts) {\n    var comments = (opts.onComment = []);\n    var tokens = (opts.onToken = []);\n\n    var ast;\n    try {\n        ast = parse(code, opts);\n    } catch (err) {\n        throw err;\n    }\n\n    tokens.pop();\n    if (opts.comment) {\n        // add comments\n        for (var i = 0; i < comments.length; i++) {\n            var comment = comments[i];\n            if (comment.type === \"CommentBlock\") {\n                comment.type = \"Block\";\n            } else if (comment.type === \"CommentLine\") {\n                comment.type = \"Line\";\n            }\n        }\n        ast.comments = comments;\n    }\n    // acorn to esprima\n    if (opts.esprimaTokens) {\n        // convert tokens\n        ast.tokens = acornToEsprima.toTokens(tokens);\n        acornToEsprima(ast, comments, ast.tokens);\n\n        // transform esprima and acorn divergent nodes\n        acornToEsprima.toAST(ast);\n    }\n    return ast;\n}\n"],"file":"babel-parse-to-esprima.js"}