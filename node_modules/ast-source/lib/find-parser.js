// LICENSE : MIT
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.findParserType = findParserType;

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var _packageUtil = require("./package-util");

var _objectAssign = require("object-assign");

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var ParserTypes = {
    // https://github.com/babel/babel/tree/master/packages/babylon aka. using by Babel
    Babylon: "Babylon",
    Esprima: "Esprima",
    Unknown: "Unknown"
};

exports.ParserTypes = ParserTypes;
function isBabylon(dependecies) {
    if (!dependecies) {
        return false;
    }
    var keys = Object.keys(dependecies);
    var matchName = /^babel|^babylon/i;
    return keys.some(function(key) {
        return matchName.test(key);
    });
}

function findParserType() {
    var pkg = (0, _packageUtil.getPackageJSON)(module.paths);
    if (!pkg) {
        return ParserTypes.Unknown;
    }
    var dependencies = (0, _objectAssign2["default"])({}, pkg["dependencies"], pkg["devDependencies"]);
    var isBabel = isBabylon(dependencies);
    if (isBabel) {
        return ParserTypes.Babylon;
    }
    return ParserTypes.Unknown;
}
//# sourceMappingURL=find-parser.js.map
