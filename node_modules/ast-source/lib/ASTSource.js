// LICENSE : MIT
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateCode = validateCode;
exports.validateOptions = validateOptions;
Object.defineProperty(exports, "ParserTypes", {
  enumerable: true,
  get: function get() {
    return _findParser.ParserTypes;
  }
});
Object.defineProperty(exports, "ASTDataContainer", {
  enumerable: true,
  get: function get() {
    return _ASTDataContainer.default;
  }
});
exports.default = void 0;

var _assert = _interopRequireDefault(require("assert"));

var _ASTParser = _interopRequireDefault(require("./ASTParser"));

var _ASTGenerator = _interopRequireDefault(require("./ASTGenerator"));

var _ASTOutput = _interopRequireDefault(require("./ASTOutput"));

var _objectAssign = _interopRequireDefault(require("object-assign"));

var _findParser = require("./utils/find-parser");

var _ASTDataContainer = _interopRequireDefault(require("./ASTDataContainer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var debug = require("debug")("ASTSource");
/**
 * @type {Object} ASTSourceOptions
 * @property {string} ASTSourceOptions.filePath? path to source code
 * @property {string} ASTSourceOptions.sourceRoot? source root path to source code
 * @property {parserType} ASTSourceOptions.parserType? what parser is used
 * @property {boolean} ASTSourceOptions.esprimaTokens? tokens
 * @property {boolean} ASTSourceOptions.range? range
 * @property {boolean} ASTSourceOptions.loc? location
 * @property {boolean} ASTSourceOptions.comment?
 */


var defaultOptions = {
  filePath: null,
  disableSourceMap: false,
  parserType: null,
  esprimaTokens: true,
  loc: true,
  range: true,
  comment: true
};

function validateCode(code) {
  (0, _assert.default)(typeof code !== "undefined");
}

function validateOptions(options) {
  if (!options.disableSourceMap) {
    (0, _assert.default)(typeof options.filePath === "string", "`options.filePath` is required for sourcemap support");
  }
}

var ASTSource =
/*#__PURE__*/
function () {
  function ASTSource(code, options) {
    _classCallCheck(this, ASTSource);

    this.code = code;
    this.options = (0, _objectAssign.default)({}, defaultOptions, options);
    validateCode(code);
    validateOptions(this.options);
    this.parser = new _ASTParser.default(this.options);
    this.generator = new _ASTGenerator.default(this.options);
    /** @type {Object} AST object */

    this.dataContainer = new _ASTDataContainer.default(this.parse(this.code));
    debug("options: %o", this.options);
  }

  _createClass(ASTSource, [{
    key: "value",
    value: function value() {
      return this.dataContainer.value;
    }
    /**
     * return cloned AST
     * @return {Object}
     */

  }, {
    key: "cloneValue",
    value: function cloneValue() {
      return this.dataContainer.cloneValue();
    }
  }, {
    key: "parse",
    value: function parse(code) {
      return this.parser.parse(code);
    }
    /**
     * transform AST by transformFn.
     * @param {function} transformFn
     * @example
     * function transformFn(AST){
     *    return modify(AST)
     * }
     * source.transform(transformFn);
     */

  }, {
    key: "transform",
    value: function transform(transformFn) {
      this.dataContainer.transform(transformFn);
      return this;
    }
    /**
     * transform AST after healing the AST.
     * @param {function} transformFn
     */

  }, {
    key: "transformStrict",
    value: function transformStrict(transformFn) {
      this.dataContainer.transformStrict(transformFn, this.options);
      return this;
    }
    /**
     * @returns {ASTOutput}
     */

  }, {
    key: "output",
    value: function output() {
      // when sourcemap is disable, only generate code
      if (this.options.disableSourceMap) {
        return new _ASTOutput.default(this.generator.generateCode(this.dataContainer.value));
      }

      var _this$generator$gener = this.generator.generateCodeWithMap(this.dataContainer.value, {
        sourceContent: this.code
      }),
          code = _this$generator$gener.code,
          map = _this$generator$gener.map;

      return new _ASTOutput.default(code, map);
    }
  }]);

  return ASTSource;
}();

exports.default = ASTSource;
//# sourceMappingURL=ASTSource.js.map