{"version":3,"sources":["../src/ASTParser.js"],"names":["esprima","require","debug","attachComments","ast","comments","tokens","length","firstComment","lastComment","start","end","loc","line","column","token","body","node","leadingComments","firstTokenStart","len","i","push","lastToken","ASTParser","options","type","code","ParserTypes","Esprima","_parseByEsprima","Babylon","_parseByBabel","Error","esprimaOptions","source","filePath","range","comment","attachComment","esprimaTokens","sourceType","parse","babylonOptions","sourceFile","locations","ranges","strictMode","allowImportExportEverywhere","allowReturnOutsideFunction","allowSuperOutsideMethod","plugins"],"mappings":"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","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport { ParserTypes, findParserType } from \"./utils/find-parser\";\n\nimport { parseToEsprima } from \"./babel-parse-to-esprima\";\n// FIXME: why wrong import for espower-babel?\nconst esprima = require(\"esprima\");\n\nvar debug = require(\"debug\")(\"ASTSource\");\n\nfunction attachComments(ast, comments, tokens) {\n    if (comments.length) {\n        var firstComment = comments[0];\n        var lastComment = comments[comments.length - 1];\n        // fixup program start\n        if (!tokens.length) {\n            // if no tokens, the program starts at the end of the last comment\n            ast.start = lastComment.end;\n            ast.loc.start.line = lastComment.loc.end.line;\n            ast.loc.start.column = lastComment.loc.end.column;\n        } else if (firstComment.start < tokens[0].start) {\n            // if there are comments before the first token, the program starts at the first token\n            var token = tokens[0];\n            ast.start = token.start;\n            ast.loc.start.line = token.loc.start.line;\n            ast.loc.start.column = token.loc.start.column;\n\n            // estraverse do not put leading comments on first node when the comment\n            // appear before the first token\n            if (ast.body.length) {\n                var node = ast.body[0];\n                node.leadingComments = [];\n                var firstTokenStart = token.start;\n                var len = comments.length;\n                for (var i = 0; i < len && comments[i].start < firstTokenStart; i++) {\n                    node.leadingComments.push(comments[i]);\n                }\n            }\n        }\n        // fixup program end\n        if (tokens.length) {\n            var lastToken = tokens[tokens.length - 1];\n            if (lastComment.end > lastToken.end) {\n                // If there is a comment after the last token, the program ends at the\n                // last token and not the comment\n                ast.end = lastToken.end;\n                ast.loc.end.line = lastToken.loc.end.line;\n                ast.loc.end.column = lastToken.loc.end.column;\n            }\n        }\n    }\n}\n\nexport default class ASTParser {\n    /**\n     * @param {ASTSourceOptions} options\n     */\n    constructor(options) {\n        this.options = options;\n        this.type = findParserType(options);\n        debug(\"ParserType: %s\", this.type);\n    }\n\n    /**\n     * change parser type\n     * @param {ParserTypes} type\n     */\n    setType(type) {\n        this.type = type;\n    }\n\n    parse(code) {\n        if (this.type === ParserTypes.Esprima) {\n            return this._parseByEsprima(code, this.options);\n        } else if (this.type === ParserTypes.Babylon) {\n            return this._parseByBabel(code, this.options);\n        }\n        throw new Error(\"unreachable #parse\");\n    }\n\n    /**\n     * @param code\n     * @param {ASTSourceOptions} options\n     * @returns {Object}\n     * @private\n     */\n    _parseByEsprima(code, options) {\n        var esprimaOptions = {\n            source: options.filePath,\n            loc: options.loc,\n            range: options.range,\n            comment: options.comment,\n            attachComment: options.comment,\n            tokens: options.esprimaTokens,\n            sourceType: options.sourceType || \"module\"\n        };\n        return esprima.parse(code, esprimaOptions);\n    }\n\n    _parseByBabel(code, options) {\n        var babylonOptions = {\n            sourceFile: options.filePath,\n            locations: options.loc,\n            ranges: options.range,\n            sourceType: options.sourceType || \"module\",\n            strictMode: true,\n            allowImportExportEverywhere: false, // consistent with espree\n            allowReturnOutsideFunction: true,\n            allowSuperOutsideMethod: true,\n            plugins: [\n                \"flow\",\n                \"jsx\",\n                \"asyncFunctions\",\n                \"asyncGenerators\",\n                \"classConstructorCall\",\n                \"classProperties\",\n                \"decorators\",\n                \"doExpressions\",\n                \"exponentiationOperator\",\n                \"exportExtensions\",\n                \"functionBind\",\n                \"functionSent\",\n                \"objectRestSpread\",\n                \"trailingFunctionCommas\"\n            ]\n        };\n        return parseToEsprima(code, babylonOptions);\n    }\n}\n"],"file":"ASTParser.js"}