// LICENSE : MIT
"use strict";

const asciidoctor = require("asciidoctor.js")();

class Converter {
  convert(text) {
    const doc = asciidoctor.load(text, { sourcemap: true });
    this.lines = doc.$source_lines();
    this.chars = [0];
    for (let line of this.lines) {
      this.chars.push(this.chars[this.chars.length - 1] + line.length);
    }
    return this.convertElement(doc, this.lines.length);
  }

  convertElement(elem, lastLineNo) {
    if (elem.context === "document") {
      return this.convertDocument(elem, lastLineNo);
    } else if (elem.context === "paragraph") {
      return this.convertParagraph(elem, lastLineNo);
    }
  }

  convertDocument(elem, lastLineNo) {
    const source = elem.$source();
    const children = [];
    const elements = elem.findBy();
    for (let i = 1; i < elements.length; i++) {
      const next =
        i + 1 < elements.length ? elements[i + 1].$lineno() - 1 : lastLineNo;
      children.push(this.convertElement(elements[i], next));
    }
    return {
      type: "Document",
      children,
      loc: {
        start: { line: 1, column: 0 },
        end: {
          line: this.lines.length,
          column: this.lines[this.lines.length - 1].length
        }
      },
      range: [0, source.length],
      raw: source
    };
  }

  convertParagraph(elem, lastLineNo) {
    const lineno = elem.$lineno();
    return {
      type: "Paragraph",
      children: [
        {
          type: "Str",
          value: elem.$source(),
          loc: {
            start: { line: lineno, column: 0 },
            end: { line: lastLineNo, column: this.lines[lastLineNo - 1].length }
          },
          range: [this.chars[lastLineNo - 1], this.chars[lastLineNo]],
          raw: elem.$source()
        }
      ],
      loc: {
        start: { line: lineno, column: 0 },
        end: { line: lastLineNo, column: this.lines[lastLineNo - 1].length }
      },
      range: [this.chars[lastLineNo - 1], this.chars[lastLineNo]],
      raw: elem.$source()
    };
  }
}

export default function parse(text) {
  return new Converter().convert(text);
}
