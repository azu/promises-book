{"version":3,"sources":["../src/parse.js"],"names":["parse","asciidoctor","require","Converter","text","doc","load","sourcemap","lines","split","chars","line","push","length","elements","convertElement","min","max","update","createEmptyDocument","elem","lineno","context","convertDocument","convertParagraph","convertList","convertListItem","convertDefinitionList","convertQuote","convertListing","convertSection","convertTable","convertElementList","$blocks","raw","$source","children","$header","convertHeader","loc","start","end","range","locationToRange","type","title","findLocation","depth","$level","value","header","$lines","locAndRangeFrom","concat","Array","prototype","blocks","apply","map","terms","item","createParagraph","style","$inner_document","row","cell","convertTableCell","$rows","$body","convertTableRow","column","positionToIndex","i","next","$lineno","found","offset","j","match","indexOf","lastLine","endLineNo","endColumn","convert"],"mappings":"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","file":"parse.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n\nconst asciidoctor = require(\"asciidoctor.js\")();\n\nclass Converter {\n  convert(text) {\n    const doc = asciidoctor.load(text, { sourcemap: true });\n\n    // NOTE: doc.$source_lines() does not contain some whitespaces and lines...\n    this.lines = text.split(/\\n/);\n    this.chars = [0];\n    for (let line of this.lines) {\n      this.chars.push(this.chars[this.chars.length - 1] + line.length + 1);\n    }\n\n    const elements = this.convertElement(doc, {\n      min: 1,\n      max: this.lines.length,\n      update: true\n    });\n    if (elements.length === 0) {\n      return this.createEmptyDocument();\n    }\n    return elements[0];\n  }\n\n  convertElement(elem, lineno) {\n    if (elem.context === \"document\") {\n      return this.convertDocument(elem, lineno);\n    } else if (elem.context === \"paragraph\" || elem.context === \"literal\") {\n      return this.convertParagraph(elem, lineno);\n    } else if (elem.context === \"ulist\" || elem.context === \"olist\") {\n      return this.convertList(elem, lineno);\n    } else if (elem.context === \"list_item\") {\n      return this.convertListItem(elem, lineno);\n    } else if (elem.context === \"dlist\") {\n      return this.convertDefinitionList(elem, lineno);\n    } else if (elem.context === \"quote\") {\n      return this.convertQuote(elem, lineno);\n    } else if (elem.context === \"listing\") {\n      return this.convertListing(elem, lineno);\n    } else if (elem.context === \"section\") {\n      return this.convertSection(elem, lineno);\n    } else if (elem.context === \"table\") {\n      return this.convertTable(elem, lineno);\n    } else if (elem.context === \"admonition\" || elem.context === \"example\") {\n      return this.convertElementList(elem.$blocks(), {\n        ...lineno,\n        update: false\n      });\n    }\n    return [];\n  }\n\n  convertDocument(elem, lineno) {\n    const raw = elem.$source();\n    let children = this.convertElementList(elem.$blocks(), lineno);\n    if (!elem.$header()[\"$nil?\"]()) {\n      children = [this.convertHeader(elem.$header(), lineno), ...children];\n    }\n    if (children.length === 0) {\n      return [];\n    }\n    const loc = {\n      start: children[0].loc.start,\n      end: children[children.length - 1].loc.end\n    };\n    const range = this.locationToRange(loc);\n    return [{ type: \"Document\", children, loc, range, raw }];\n  }\n\n  convertHeader(elem, lineno) {\n    const raw = elem.title;\n    const loc = this.findLocation([raw], lineno);\n    const range = this.locationToRange(loc);\n    return {\n      type: \"Header\",\n      depth: elem.$level() + 1,\n      children: [{ type: \"Str\", value: elem.title, loc, range, raw }],\n      loc,\n      range,\n      raw\n    };\n  }\n\n  convertSection(elem, lineno) {\n    const raw = elem.title;\n    const loc = this.findLocation([raw], lineno);\n    if (!loc) {\n      return [];\n    }\n    const range = this.locationToRange(loc);\n    const header = {\n      type: \"Header\",\n      depth: elem.$level() + 1,\n      children: [{ type: \"Str\", value: elem.title, loc, range, raw }],\n      loc,\n      range,\n      raw\n    };\n    const children = this.convertElementList(elem.$blocks(), lineno);\n    return [header, ...children];\n  }\n\n  convertParagraph(elem, { min, max }) {\n    const raw = elem.$source();\n    const loc = this.findLocation(elem.$lines(), { min, max });\n    if (!loc) {\n      return [];\n    }\n    const range = this.locationToRange(loc);\n    return [\n      {\n        type: \"Paragraph\",\n        children: [{ type: \"Str\", value: raw, loc, range, raw }],\n        loc,\n        range,\n        raw\n      }\n    ];\n  }\n\n  convertQuote(elem, { min, max }) {\n    const raw = \"\"; // TODO: fix asciidoc/asciidoc\n    const children = this.convertElementList(elem.$blocks(), {\n      min,\n      max,\n      update: false\n    });\n    if (children.length === 0) {\n      return [];\n    }\n    return [\n      { type: \"BlockQuote\", children, raw, ...this.locAndRangeFrom(children) }\n    ];\n  }\n\n  convertListing(elem, { min, max }) {\n    const raw = elem.$source();\n    const loc = this.findLocation(elem.$lines(), { min, max });\n    if (!loc) {\n      return [];\n    }\n    const range = this.locationToRange(loc);\n    return [{ type: \"CodeBlock\", value: raw, loc, range, raw }];\n  }\n\n  convertList(elem, { min, max }) {\n    const raw = \"\"; // TODO: fix asciidoc/asciidoc\n    const children = this.convertElementList(elem.$blocks(), {\n      min,\n      max,\n      update: false\n    });\n    if (children.length === 0) {\n      return [];\n    }\n    return [{ type: \"List\", children, raw, ...this.locAndRangeFrom(children) }];\n  }\n\n  convertDefinitionList(elem, { min, max }) {\n    const raw = \"\"; // TODO: fix asciidoc/asciidoc\n    const concat = Array.prototype.concat;\n    const blocks = concat.apply(\n      [],\n      elem.$blocks().map(([terms, item]) => [...terms, item])\n    );\n    const children = this.convertElementList(blocks, {\n      min,\n      max,\n      update: false\n    });\n    if (children.length === 0) {\n      return [];\n    }\n    return [{ type: \"List\", children, raw, ...this.locAndRangeFrom(children) }];\n  }\n\n  convertListItem(elem, lineno) {\n    const raw = \"\"; // TODO: fix asciidoc/asciidoc\n    let children = this.convertElementList(elem.$blocks(), lineno);\n    if (!elem.text[\"$nil?\"]()) {\n      children = [...this.createParagraph(elem.text, lineno), ...children];\n    }\n    if (children.length === 0) {\n      return [];\n    }\n    return [\n      {\n        type: \"ListItem\",\n        children,\n        raw,\n        ...this.locAndRangeFrom(children)\n      }\n    ];\n  }\n\n  convertTableCell(elem, lineno) {\n    const raw = elem.text;\n    const loc = this.findLocation(raw.split(/\\n/), lineno);\n    if (!loc) {\n      return [];\n    }\n    const range = this.locationToRange(loc);\n\n    let children = [];\n    if (elem.style === \"asciidoc\") {\n      children = this.convertElementList(\n        elem.$inner_document().$blocks(),\n        lineno\n      );\n    } else {\n      children = [\n        {\n          type: \"Str\",\n          value: raw,\n          loc,\n          range,\n          raw\n        }\n      ];\n    }\n\n    return [\n      {\n        type: \"TableCell\",\n        children,\n        loc,\n        range,\n        raw\n      }\n    ];\n  }\n\n  convertTableRow(row, lineno) {\n    let children = [];\n    for (let cell of row) {\n      children = [...children, ...this.convertTableCell(cell, lineno)];\n    }\n    if (children.length === 0) {\n      return [];\n    }\n    const loc = {\n      start: children[0].loc.start,\n      end: children[children.length - 1].loc.end\n    };\n    const range = this.locationToRange(loc);\n    return [\n      {\n        type: \"TableRow\",\n        children,\n        loc,\n        range,\n        raw: \"\"\n      }\n    ];\n  }\n\n  convertTable(elem, { min, max }) {\n    let children = [];\n    for (let row of elem.$rows().$body()) {\n      children = [\n        ...children,\n        ...this.convertTableRow(row, { min, max, update: false })\n      ];\n    }\n    if (children.length === 0) {\n      return [];\n    }\n    const loc = {\n      start: children[0].loc.start,\n      end: children[children.length - 1].loc.end\n    };\n    const range = this.locationToRange(loc);\n    return [\n      {\n        type: \"Table\",\n        children,\n        loc,\n        range,\n        raw: \"\"\n      }\n    ];\n  }\n\n  createParagraph(raw, lineno) {\n    const loc = this.findLocation(raw.split(/\\n/), lineno);\n    if (!loc) {\n      return [];\n    }\n    const range = this.locationToRange(loc);\n    return [\n      {\n        type: \"Paragraph\",\n        children: [{ type: \"Str\", value: raw, loc, range, raw }],\n        loc,\n        range,\n        raw\n      }\n    ];\n  }\n\n  locAndRangeFrom(children) {\n    const loc = {\n      start: children[0].loc.start,\n      end: children[children.length - 1].loc.end\n    };\n    const range = this.locationToRange(loc);\n    return { loc, range };\n  }\n\n  positionToIndex({ line, column }) {\n    return this.chars[line - 1] + column;\n  }\n\n  locationToRange({ start, end }) {\n    return [this.positionToIndex(start), this.positionToIndex(end)];\n  }\n\n  convertElementList(elements, { min, max, update }) {\n    let children = [];\n    for (let i = 0; i < elements.length; i++) {\n      let next = { min, max, update };\n      if (update) {\n        next.min = elements[i].$lineno();\n        if (i + 1 < elements.length) {\n          next.max = elements[i + 1].$lineno();\n        }\n      }\n      children = children.concat(this.convertElement(elements[i], next));\n    }\n    return children;\n  }\n\n  findLocation(lines, { min, max }) {\n    for (let i = min; i + lines.length - 1 <= max; i++) {\n      let found = true;\n      let offset = 0; // see \"comment in paragraph\" test case.\n      for (let j = 0; j < lines.length; j++) {\n        while (this.lines[i + j - 1 + offset].match(/^\\/\\//)) {\n          offset++;\n        }\n        if (this.lines[i + j - 1 + offset].indexOf(lines[j]) === -1) {\n          found = false;\n          break;\n        }\n      }\n      if (!found) {\n        continue;\n      }\n\n      const lastLine = lines[lines.length - 1];\n      const endLineNo = i + lines.length - 1 + offset;\n      const endColumn =\n        this.lines[endLineNo - 1].indexOf(lastLine) + lastLine.length;\n      return {\n        start: { line: i, column: this.lines[i - 1].indexOf(lines[0]) },\n        end: { line: endLineNo, column: endColumn }\n      };\n    }\n    return null;\n  }\n\n  createEmptyDocument() {\n    return {\n      type: \"Document\",\n      children: [],\n      range: [0, 0],\n      loc: { start: { line: 1, column: 0 }, end: { line: 1, column: 0 } },\n      raw: \"\"\n    };\n  }\n}\n\nexport default function parse(text) {\n  return new Converter().convert(text);\n}\n"]}