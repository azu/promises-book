"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Proxy `target` and trap it by `proxyHandler`
 * This delegateProxy support `Object.freeze`d `target.
 * That means that return proxy dummy object and delegate trap to `target`.
 *
 * Limitation: this proxy object is not recoverable.
 * @param target proxy target
 * @param proxyHandler proxy handler
 */
function delegateProxy(target, proxyHandler) {
    var dummyObject = {};
    var proxyProxyhandler = {
        getPrototypeOf: function (_dummyTarget) {
            return proxyHandler.getPrototypeOf
                ? proxyHandler.getPrototypeOf(target)
                : Reflect.getPrototypeOf(target);
        },
        setPrototypeOf: function (_dummyTarget, v) {
            return proxyHandler.setPrototypeOf
                ? proxyHandler.setPrototypeOf(target, v)
                : Reflect.setPrototypeOf(target, v);
        },
        isExtensible: function (_dummyTarget) {
            return proxyHandler.isExtensible
                ? proxyHandler.isExtensible(target)
                : Reflect.isExtensible(target);
        },
        preventExtensions: function (_dummyTarget) {
            return proxyHandler.preventExtensions
                ? proxyHandler.preventExtensions(target)
                : Reflect.preventExtensions(target);
        },
        getOwnPropertyDescriptor: function (_dummyTarget, p) {
            return proxyHandler.getOwnPropertyDescriptor
                ? proxyHandler.getOwnPropertyDescriptor(target, p)
                : Reflect.getOwnPropertyDescriptor(target, p);
        },
        has: function (_dummyTarget, p) {
            return proxyHandler.has
                ? proxyHandler.has(target, p)
                : Reflect.has(target, p);
        },
        get: function (_dummyTarget, p, receiver) {
            return proxyHandler.get
                ? proxyHandler.get(target, p, receiver)
                : Reflect.get(target, p, receiver);
        },
        set: function (_dummyTarget, p, value, receiver) {
            return proxyHandler.set
                ? proxyHandler.set(target, p, value, receiver)
                : Reflect.set(target, p, value, receiver);
        },
        deleteProperty: function (_dummyTarget, p) {
            return proxyHandler.deleteProperty
                ? proxyHandler.deleteProperty(target, p)
                : Reflect.deleteProperty(target, p);
        },
        defineProperty: function (_dummyTarget, p, attributes) {
            return proxyHandler.defineProperty
                ? proxyHandler.defineProperty(target, p, attributes)
                : Reflect.defineProperty(target, p, attributes);
        },
        ownKeys: function (_dummyTarget) {
            return proxyHandler.ownKeys
                ? proxyHandler.ownKeys(target)
                : Reflect.ownKeys(target);
        },
        apply: function (_dummyTarget, thisArg, argArray) {
            return proxyHandler.apply
                ? proxyHandler.apply(target, thisArg, argArray)
                : Reflect.apply(target, thisArg, argArray);
        },
        construct: function (_dummyTarget, argArray, newTarget) {
            return proxyHandler.construct
                ? proxyHandler.construct(target, argArray, newTarget)
                : Reflect.construct(target, argArray, newTarget);
        }
    };
    return new Proxy(dummyObject, proxyProxyhandler);
}
exports.delegateProxy = delegateProxy;
//# sourceMappingURL=delegate-proxy.js.map