{"version":3,"sources":["../src/textlint-rule-no-synonyms.ts"],"names":["TinySegmenter","require","segmenter","DefaultOptions","allows","allowAlphabet","report","context","options","undefined","Syntax","getSource","RuleError","usedSudachiSynonyms","Set","locationMap","Map","usedItemGroup","indexPromise","matchSegment","segment","absoluteIndex","keyItemGroupMap","itemGroups","get","forEach","itemGroup","midashAtOnce","items","item","midashi","add","set","index","ignoreNodeTypes","BlockQuote","CodeBlock","Code","Html","Link","Image","Comment","Str","node","text","segments","range","segement","length","DocumentExit","values","usedItems","同義の見出しList","map","message","join"],"mappings":"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","sourcesContent":["import { TextlintRuleReporter } from \"@textlint/types\";\nimport { createIndex, ItemGroup, Midashi } from \"./create-index\";\nimport { SudachiSynonyms } from \"sudachi-synonyms-dictionary\";\nimport { wrapReportHandler } from \"textlint-rule-helper\";\n\nconst TinySegmenter = require(\"tiny-segmenter\");\nconst segmenter = new TinySegmenter(); // インスタンス生成\n\nexport interface Options {\n    /**\n     * 許可するワードの配列\n     * ワードは完全一致で比較し、一致した場合は無視されます\n     * 例) [\"ウェブアプリ\", \"ウェブアプリケーション\"]\n     */\n    allows?: string[];\n    /**\n     * 同じ語形の語の中でのアルファベットの表記揺れを許可するかどうか\n     * trueの場合はカタカナとアルファベットの表記ゆれを許可します\n     * 例) 「ブログ」と「blog」\n     * Default: true\n     */\n    allowAlphabet?: boolean;\n}\n\n\nexport const DefaultOptions: Required<Options> = {\n    allows: [],\n    allowAlphabet: true\n};\n\nconst report: TextlintRuleReporter<Options> = (context, options = {}) => {\n    const allowAlphabet = options.allowAlphabet !== undefined ? options.allowAlphabet : DefaultOptions.allowAlphabet;\n    const allows = options.allows !== undefined ? options.allows : DefaultOptions.allows;\n    const { Syntax, getSource, RuleError } = context;\n    const usedSudachiSynonyms: Set<SudachiSynonyms> = new Set();\n    const locationMap: Map<SudachiSynonyms, { index: number }> = new Map();\n    const usedItemGroup: Set<ItemGroup> = new Set();\n    const indexPromise = createIndex();\n    const matchSegment = (segment: string, absoluteIndex: number, keyItemGroupMap: Map<Midashi, ItemGroup[]>) => {\n        const itemGroups = keyItemGroupMap.get(segment);\n        if (!itemGroups) {\n            return;\n        }\n        itemGroups.forEach(itemGroup => {\n            // \"アーカイブ\" など同じ見出しを複数回もつItemGroupがあるため、ItemGroupごとに1度のみに限定\n            let midashAtOnce = false;\n            itemGroup.items.forEach(item => {\n                if (!midashAtOnce && item.midashi === segment) {\n                    midashAtOnce = true;\n                    usedSudachiSynonyms.add(item);\n                    locationMap.set(item, { index: absoluteIndex });\n                }\n                usedItemGroup.add(itemGroup);\n            });\n        });\n    };\n    return wrapReportHandler(context,\n        {\n            ignoreNodeTypes: [Syntax.BlockQuote, Syntax.CodeBlock, Syntax.Code, Syntax.Html, Syntax.Link, Syntax.Image, Syntax.Comment]\n        },\n        (report) => {\n            return {\n                async [Syntax.Str](node) {\n                    const { keyItemGroupMap } = await indexPromise;\n                    const text = getSource(node);\n                    const segments: string[] = segmenter.segment(text);\n                    let absoluteIndex = node.range[0];\n                    segments.forEach((segement) => {\n                        matchSegment(segement, absoluteIndex, keyItemGroupMap);\n                        absoluteIndex += segement.length;\n                    });\n                },\n                async [Syntax.DocumentExit](node) {\n                    await indexPromise;\n                    for (const itemGroup of usedItemGroup.values()) {\n                        const items = itemGroup.usedItems(usedSudachiSynonyms, {\n                            allows,\n                            allowAlphabet\n                        });\n                        if (items.length >= 2) {\n                            const 同義の見出しList = items.map(item => item.midashi);\n                            // select last used\n                            const matchSegment = locationMap.get(items[items.length - 1]);\n                            const index = matchSegment ? matchSegment.index : 0;\n                            const message = `同義語である「${同義の見出しList.join(\"」「\")}」が利用されています`;\n                            report(node, new RuleError(message, {\n                                index\n                            }));\n                        }\n                    }\n                }\n            };\n        }\n    );\n};\n\nexport default report;\n"],"file":"textlint-rule-no-synonyms.js"}