{"version":3,"sources":["../src/create-index.ts"],"names":["ItemGroup","constructor","items","usedItems","usedItemSet","allowAlphabet","allows","Array","from","values","filter","item","hyoukiYure","includes","midashi","_ret","createIndex","Promise","resolve","keyItemGroupMap","Map","SudachiSynonymsItemGroup","SynonymsDictionary","forEach","group","groupByVocabularyNumber","reduce","res","vocabularyNumber","concat","itemGroups","Object","length","map","itemGroup","oldItemGroup","get","set"],"mappings":";;;;;;;AAAA;;;;;;AAIA;;;;;;;;;;;AAWO,MAAMA,SAAN,CAAgB;AACnBC,EAAAA,WAAW,CAAQC,KAAR,EAAkC;AAAA,SAA1BA,KAA0B,GAA1BA,KAA0B;AAE5C;;AAEDC,EAAAA,SAAS,CAACC,WAAD,QAAgI;AAAA,QAA5F;AAAEC,MAAAA,aAAF;AAAiBC,MAAAA;AAAjB,KAA4F;AACrI;AACA,WAAOC,KAAK,CAACC,IAAN,CAAWJ,WAAW,CAACK,MAAZ,EAAX,EAAiCC,MAAjC,CAAwCC,IAAI,IAAI;AACnD,UAAIN,aAAa,IAAIM,IAAI,CAACC,UAAL,KAAoB,WAAzC,EAAsD;AAClD,eAAO,KAAP;AACH;;AACD,UAAIN,MAAM,CAACO,QAAP,CAAgBF,IAAI,CAACG,OAArB,CAAJ,EAAmC;AAC/B,eAAO,KAAP;AACH;;AACD,aAAO,KAAKZ,KAAL,CAAWW,QAAX,CAAoBF,IAApB,CAAP;AACH,KARM,CAAP;AASH;;AAhBkB;;;AAoBvB,IAAII,IAAsB,GAAG,IAA7B;;AACO,IAAMC,WAAW;AAAA;AAAA;AAAA,gCAAG,aAAgC;AACvD,QAAID,IAAJ,EAAU;AACN,aAAOE,OAAO,CAACC,OAAR,CAAgBH,IAAhB,CAAP;AACH;;AACD,QAAMI,eAA0C,GAAG,IAAIC,GAAJ,EAAnD;AACA,QAAMC,wBAAyD,GAAG,IAAID,GAAJ,EAAlE;AACA,QAAME,kBAAkB,SAAS,iDAAjC;AACAA,IAAAA,kBAAkB,CAACC,OAAnB,CAA2BC,KAAK,IAAI;AAChC,UAAMC,uBAAuB,GAAGD,KAAK,CAACtB,KAAN,CAAYwB,MAAZ,CAAmB,CAACC,GAAD,EAAMhB,IAAN,KAAe;AAC9DgB,QAAAA,GAAG,CAAChB,IAAI,CAACiB,gBAAN,CAAH,GAA8B,CAACD,GAAG,CAAChB,IAAI,CAACiB,gBAAN,CAAH,IAA+B,EAAhC,EAAoCC,MAApC,CAA2ClB,IAA3C,CAA9B;AACA,eAAOgB,GAAP;AACH,OAH+B,EAG7B,EAH6B,CAAhC;AAIA,UAAMG,UAAU,GAAGC,MAAM,CAACtB,MAAP,CAAcgB,uBAAd,EAAuCf,MAAvC,CAA8CR,KAAK,IAAI;AACtE,eAAOA,KAAK,CAAC8B,MAAN,GAAe,CAAtB;AACH,OAFkB,EAEhBC,GAFgB,CAEZ/B,KAAK,IAAI;AACZ,eAAO,IAAIF,SAAJ,CAAcE,KAAd,CAAP;AACH,OAJkB,CAAnB,CALgC,CAUhC;;AACA4B,MAAAA,UAAU,CAACP,OAAX,CAAmBW,SAAS,IAAI;AAC5BA,QAAAA,SAAS,CAAChC,KAAV,CAAgBqB,OAAhB,CAAwBZ,IAAI,IAAI;AAC5B,cAAMwB,YAAY,GAAGhB,eAAe,CAACiB,GAAhB,CAAoBzB,IAAI,CAACG,OAAzB,KAAqC,EAA1D;AACAK,UAAAA,eAAe,CAACkB,GAAhB,CAAoB1B,IAAI,CAACG,OAAzB,EAAkCqB,YAAY,CAACN,MAAb,CAAoBK,SAApB,CAAlC;AACAb,UAAAA,wBAAwB,CAACgB,GAAzB,CAA6B1B,IAA7B,EAAmCuB,SAAnC;AACH,SAJD;AAKH,OAND;AAOH,KAlBD;AAmBAnB,IAAAA,IAAI,GAAG;AACHI,MAAAA,eADG;AAEHE,MAAAA;AAFG,KAAP;AAIA,WAAOJ,OAAO,CAACC,OAAR,CAAgBH,IAAhB,CAAP;AACH,GA/BuB;;AAAA,kBAAXC,WAAW;AAAA;AAAA;AAAA,GAAjB","sourcesContent":["import { fetchDictionary, SudachiSynonyms } from \"sudachi-synonyms-dictionary\";\n\nexport type Midashi = string;\n\n/**\n * Dictionary Design\n *\n * // Index\n * <Midashi>: ItemGroup[]\n * // Check\n * SudachiSynonyms: boolean\n * ItemGroup: boolean\n * // Collection\n * usedItemGroup.forEach\n */\nexport class ItemGroup {\n    constructor(public items: SudachiSynonyms[]) {\n\n    }\n\n    usedItems(usedItemSet: Set<SudachiSynonyms>, { allowAlphabet, allows }: { allowAlphabet: boolean, allows: string[] }): SudachiSynonyms[] {\n        // sort by used\n        return Array.from(usedItemSet.values()).filter(item => {\n            if (allowAlphabet && item.hyoukiYure === \"アルファベット表記\") {\n                return false;\n            }\n            if (allows.includes(item.midashi)) {\n                return false;\n            }\n            return this.items.includes(item);\n        });\n    }\n}\n\nexport type IndexType = { keyItemGroupMap: Map<Midashi, ItemGroup[]>; SudachiSynonymsItemGroup: Map<SudachiSynonyms, ItemGroup>; };\nlet _ret: IndexType | null = null;\nexport const createIndex = async (): Promise<IndexType> => {\n    if (_ret) {\n        return Promise.resolve(_ret);\n    }\n    const keyItemGroupMap: Map<Midashi, ItemGroup[]> = new Map();\n    const SudachiSynonymsItemGroup: Map<SudachiSynonyms, ItemGroup> = new Map();\n    const SynonymsDictionary = await fetchDictionary();\n    SynonymsDictionary.forEach(group => {\n        const groupByVocabularyNumber = group.items.reduce((res, item) => {\n            res[item.vocabularyNumber!] = (res[item.vocabularyNumber!] || []).concat(item);\n            return res;\n        }, {} as { [index: string]: SudachiSynonyms[] });\n        const itemGroups = Object.values(groupByVocabularyNumber).filter(items => {\n            return items.length > 1;\n        }).map(items => {\n            return new ItemGroup(items);\n        });\n        // register key with itemGroup\n        itemGroups.forEach(itemGroup => {\n            itemGroup.items.forEach(item => {\n                const oldItemGroup = keyItemGroupMap.get(item.midashi) || [];\n                keyItemGroupMap.set(item.midashi, oldItemGroup.concat(itemGroup));\n                SudachiSynonymsItemGroup.set(item, itemGroup);\n            });\n        });\n    });\n    _ret = {\n        keyItemGroupMap,\n        SudachiSynonymsItemGroup\n    };\n    return Promise.resolve(_ret);\n};\n"],"file":"create-index.js"}