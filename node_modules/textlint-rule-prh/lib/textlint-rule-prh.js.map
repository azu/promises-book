{"version":3,"sources":["../src/textlint-rule-prh.js"],"names":["RegExp","prototype","flags","undefined","Object","defineProperty","configurable","get","toString","match","prh","require","path","untildify","defaultOptions","checkLink","checkBlockQuote","checkEmphasis","checkHeader","createPrhEngine","rulePaths","baseDir","length","expandedRulePaths","map","rulePath","prhEngine","fromYAMLFilePath","resolve","slice","forEach","ruleFilePath","config","merge","createPrhEngineFromContents","yamlContents","dummyFilePath","fromYAML","content","mergePrh","engines","engines_","filter","engine","mainEngine","assertOptions","options","ruleContents","Error","createIgnoreNodeTypes","Syntax","nodeTypes","push","Link","BlockQuote","Emphasis","Header","forEachChange","changeSet","str","onChangeOfMatch","sortedDiffs","diffs","sort","a","b","index","delta","diff","result","expected","replace","g1","parseInt","matches","matchStartIndex","matchEndIndex","actual","rule","raw","getConfigBaseDir","context","process","cwd","textlintRcFilePath","configFile","dirname","reporter","userOptions","assign","textlintRCDir","prhEngineContent","prhEngineFiles","helper","RuleHelper","getSource","report","fixer","RuleError","ignoreNodeTypes","Str","node","isChildNode","text","makeChangeSet","suffix","messages","fix","replaceTextRange","module","exports","linter"],"mappings":"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","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport { RuleHelper } from \"textlint-rule-helper\";\n/**\n * RegExp#flags polyfill\n */\nif (RegExp.prototype.flags === undefined) {\n    Object.defineProperty(RegExp.prototype, \"flags\", {\n        configurable: true,\n        get: function() {\n            return this.toString().match(/[gimuy]*$/)[0];\n        }\n    });\n}\n\nconst prh = require(\"prh\");\nconst path = require(\"path\");\nconst untildify = require(\"untildify\");\n\nconst defaultOptions = {\n    checkLink: false,\n    checkBlockQuote: false,\n    checkEmphasis: false,\n    checkHeader: true\n};\n\nfunction createPrhEngine(rulePaths, baseDir) {\n    if (rulePaths.length === 0) {\n        return null;\n    }\n    const expandedRulePaths = rulePaths.map(rulePath => untildify(rulePath));\n    const prhEngine = prh.fromYAMLFilePath(path.resolve(baseDir, expandedRulePaths[0]));\n    expandedRulePaths.slice(1).forEach(ruleFilePath => {\n        const config = prh.fromYAMLFilePath(path.resolve(baseDir, ruleFilePath));\n        prhEngine.merge(config);\n    });\n    return prhEngine;\n}\n\nfunction createPrhEngineFromContents(yamlContents) {\n    if (yamlContents.length === 0) {\n        return null;\n    }\n    const dummyFilePath = \"\";\n    const prhEngine = prh.fromYAML(dummyFilePath, yamlContents[0]);\n    yamlContents.slice(1).forEach(content => {\n        const config = prh.fromYAML(dummyFilePath, content);\n        prhEngine.merge(config);\n    });\n    return prhEngine;\n}\n\nfunction mergePrh(...engines) {\n    const engines_ = engines.filter(engine => !!engine);\n    const mainEngine = engines_[0];\n    engines_.slice(1).forEach(engine => {\n        mainEngine.merge(engine);\n    });\n    return mainEngine;\n}\n\nconst assertOptions = options => {\n    if (typeof options.ruleContents === \"undefined\" && typeof options.rulePaths === \"undefined\") {\n        throw new Error(`textlint-rule-prh require Rule Options.\nPlease set .textlinrc:\n{\n    \"rules\": {\n        \"prh\": {\n            \"rulePaths\" :[\"path/to/prh.yml\"]\n        }\n    }\n}\n`);\n    }\n};\n\nconst createIgnoreNodeTypes = (options, Syntax) => {\n    const nodeTypes = [];\n    if (!options.checkLink) {\n        nodeTypes.push(Syntax.Link);\n    }\n    if (!options.checkBlockQuote) {\n        nodeTypes.push(Syntax.BlockQuote);\n    }\n    if (!options.checkEmphasis) {\n        nodeTypes.push(Syntax.Emphasis);\n    }\n    if (!options.checkHeader) {\n        nodeTypes.push(Syntax.Header);\n    }\n    return nodeTypes;\n};\n\n/**\n * for each diff of changeSet\n * @param {ChangeSet} changeSet\n * @param {string} str\n * @param {function({\n            matchStartIndex: number,\n            matchEndIndex: number,\n            actual: string\n            expected: string\n        })}onChangeOfMatch\n */\nconst forEachChange = (changeSet, str, onChangeOfMatch) => {\n    const sortedDiffs = changeSet.diffs.sort(function(a, b) {\n        return a.index - b.index;\n    });\n    let delta = 0;\n    sortedDiffs.forEach(function(diff) {\n        const result = diff.expected.replace(/\\$([0-9]{1,2})/g, function(match, g1) {\n            const index = parseInt(g1);\n            if (index === 0 || diff.matches.length - 1 < index) {\n                return match;\n            }\n            return diff.matches[index] || \"\";\n        });\n        // matchStartIndex/matchEndIndex value is original position, not replaced position\n        // textlint use original position\n        const matchStartIndex = diff.index;\n        const matchEndIndex = matchStartIndex + diff.matches[0].length;\n        // actual => expected\n        const actual = str.slice(diff.index + delta, diff.index + delta + diff.matches[0].length);\n        const prh = diff.rule.raw.prh || null;\n        onChangeOfMatch({\n            matchStartIndex,\n            matchEndIndex,\n            actual: actual,\n            expected: result,\n            prh\n        });\n        str = str.slice(0, diff.index + delta) + result + str.slice(diff.index + delta + diff.matches[0].length);\n        delta += result.length - diff.matches[0].length;\n    });\n};\nconst getConfigBaseDir = context => {\n    if (typeof context.getConfigBaseDir === \"function\") {\n        return context.getConfigBaseDir() || process.cwd();\n    }\n    // Old fallback that use deprecated `config` value\n    // https://github.com/textlint/textlint/issues/294\n    const textlintRcFilePath = context.config ? context.config.configFile : null;\n    // .textlinrc directory\n    return textlintRcFilePath ? path.dirname(textlintRcFilePath) : process.cwd();\n};\n\nfunction reporter(context, userOptions = {}) {\n    assertOptions(userOptions);\n    const options = Object.assign({}, defaultOptions, userOptions);\n    // .textlinrc directory\n    const textlintRCDir = getConfigBaseDir(context);\n    // create prh config\n    const rulePaths = options.rulePaths || [];\n    const ruleContents = options.ruleContents || [];\n    // yaml file + yaml contents\n    const prhEngineContent = createPrhEngineFromContents(ruleContents);\n    const prhEngineFiles = createPrhEngine(rulePaths, textlintRCDir);\n    const prhEngine = mergePrh(prhEngineFiles, prhEngineContent);\n    const helper = new RuleHelper(context);\n    const { Syntax, getSource, report, fixer, RuleError } = context;\n    const ignoreNodeTypes = createIgnoreNodeTypes(options, Syntax);\n    return {\n        [Syntax.Str](node) {\n            if (helper.isChildNode(node, ignoreNodeTypes)) {\n                return;\n            }\n            const text = getSource(node);\n            // to get position from index\n            // https://github.com/prh/prh/issues/29\n            const dummyFilePath = \"\";\n            const makeChangeSet = prhEngine.makeChangeSet(dummyFilePath, text);\n            forEachChange(makeChangeSet, text, ({ matchStartIndex, matchEndIndex, actual, expected, prh }) => {\n                // If result is not changed, should not report\n                if (actual === expected) {\n                    return;\n                }\n\n                const suffix = prh !== null ? \"\\n\" + prh : \"\";\n                const messages = actual + \" => \" + expected + suffix;\n                report(\n                    node,\n                    new RuleError(messages, {\n                        index: matchStartIndex,\n                        fix: fixer.replaceTextRange([matchStartIndex, matchEndIndex], expected)\n                    })\n                );\n            });\n        }\n    };\n}\n\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};\n"],"file":"textlint-rule-prh.js"}