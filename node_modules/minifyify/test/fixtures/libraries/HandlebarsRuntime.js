var Handlebars={};module.exports=Handlebars,function(e,r){e.VERSION="1.0.0",e.COMPILER_REVISION=4,e.REVISION_CHANGES={1:"<= 1.0.rc.2",2:"== 1.0.0-rc.3",3:"== 1.0.0-rc.4",4:">= 1.0.0"},e.helpers={},e.partials={};var t=Object.prototype.toString,n="[object Function]",i="[object Object]";e.registerHelper=function(r,n,o){if(t.call(r)===i){if(o||n)throw new e.Exception("Arg not supported with multiple helpers");e.Utils.extend(this.helpers,r)}else o&&(n.not=o),this.helpers[r]=n},e.registerPartial=function(r,n){t.call(r)===i?e.Utils.extend(this.partials,r):this.partials[r]=n},e.registerHelper("helperMissing",function(e){if(2===arguments.length)return r;throw new Error("Missing helper: '"+e+"'")}),e.registerHelper("blockHelperMissing",function(r,i){var o=i.inverse||function(){},a=i.fn,l=t.call(r);return l===n&&(r=r.call(this)),r===!0?a(this):r===!1||null==r?o(this):"[object Array]"===l?r.length>0?e.helpers.each(r,i):o(this):a(r)}),e.K=function(){},e.createFrame=Object.create||function(r){e.K.prototype=r;var t=new e.K;return e.K.prototype=null,t},e.logger={DEBUG:0,INFO:1,WARN:2,ERROR:3,level:3,methodMap:{0:"debug",1:"info",2:"warn",3:"error"},log:function(r,t){if(e.logger.level<=r){var n=e.logger.methodMap[r];"undefined"!=typeof console&&console[n]&&console[n].call(console,t)}}},e.log=function(r,t){e.logger.log(r,t)},e.registerHelper("each",function(r,i){var o,a=i.fn,l=i.inverse,s=0,p="",c=t.call(r);if(c===n&&(r=r.call(this)),i.data&&(o=e.createFrame(i.data)),r&&"object"==typeof r)if(r instanceof Array)for(var u=r.length;u>s;s++)o&&(o.index=s),p+=a(r[s],{data:o});else for(var f in r)r.hasOwnProperty(f)&&(o&&(o.key=f),p+=a(r[f],{data:o}),s++);return 0===s&&(p=l(this)),p}),e.registerHelper("if",function(r,i){var o=t.call(r);return o===n&&(r=r.call(this)),!r||e.Utils.isEmpty(r)?i.inverse(this):i.fn(this)}),e.registerHelper("unless",function(r,t){return e.helpers["if"].call(this,r,{fn:t.inverse,inverse:t.fn})}),e.registerHelper("with",function(r,i){var o=t.call(r);return o===n&&(r=r.call(this)),e.Utils.isEmpty(r)?void 0:i.fn(r)}),e.registerHelper("log",function(r,t){var n=t.data&&null!=t.data.level?parseInt(t.data.level,10):1;e.log(n,r)});var o=["description","fileName","lineNumber","message","name","number","stack"];e.Exception=function(){for(var e=Error.prototype.constructor.apply(this,arguments),r=0;r<o.length;r++)this[o[r]]=e[o[r]]},e.Exception.prototype=new Error,e.SafeString=function(e){this.string=e},e.SafeString.prototype.toString=function(){return this.string.toString()};var a={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},l=/[&<>"'`]/g,s=/[&<>"'`]/,p=function(e){return a[e]||"&amp;"};e.Utils={extend:function(e,r){for(var t in r)r.hasOwnProperty(t)&&(e[t]=r[t])},escapeExpression:function(r){return r instanceof e.SafeString?r.toString():null==r||r===!1?"":(r=r.toString(),s.test(r)?r.replace(l,p):r)},isEmpty:function(e){return e||0===e?"[object Array]"===t.call(e)&&0===e.length?!0:!1:!0}},e.VM={template:function(r){var t={escapeExpression:e.Utils.escapeExpression,invokePartial:e.VM.invokePartial,programs:[],program:function(r,t,n){var i=this.programs[r];return n?i=e.VM.program(r,t,n):i||(i=this.programs[r]=e.VM.program(r,t)),i},merge:function(r,t){var n=r||t;return r&&t&&(n={},e.Utils.extend(n,t),e.Utils.extend(n,r)),n},programWithDepth:e.VM.programWithDepth,noop:e.VM.noop,compilerInfo:null};return function(n,i){i=i||{};var o=r.call(t,e,n,i.helpers,i.partials,i.data),a=t.compilerInfo||[],l=a[0]||1,s=e.COMPILER_REVISION;if(l!==s){if(s>l){var p=e.REVISION_CHANGES[s],c=e.REVISION_CHANGES[l];throw"Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version ("+p+") or downgrade your runtime to an older version ("+c+")."}throw"Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version ("+a[1]+")."}return o}},programWithDepth:function(e,r,t){var n=Array.prototype.slice.call(arguments,3),i=function(e,i){return i=i||{},r.apply(this,[e,i.data||t].concat(n))};return i.program=e,i.depth=n.length,i},program:function(e,r,t){var n=function(e,n){return n=n||{},r(e,n.data||t)};return n.program=e,n.depth=0,n},noop:function(){return""},invokePartial:function(t,n,i,o,a,l){var s={helpers:o,partials:a,data:l};if(t===r)throw new e.Exception("The partial "+n+" could not be found");if(t instanceof Function)return t(i,s);if(e.compile)return a[n]=e.compile(t,{data:l!==r}),a[n](i,s);throw new e.Exception("The partial "+n+" could not be compiled when running in runtime-only mode")}},e.template=e.VM.template}(Handlebars);
//@ sourceMappingURL=data:application/json;base64,