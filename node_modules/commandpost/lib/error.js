"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const util = __importStar(require("util"));
var ErrorReason;
(function (ErrorReason) {
    ErrorReason["UnsupportedFormatArgument"] = "unsupported format";
    ErrorReason["ArgumentsRequired"] = "1 or more arguments required";
    ErrorReason["ArgumentRequired"] = "argument required";
    ErrorReason["ParameterCantPlacedAfterVariadic"] = "parameter can not placed after variadic parameter";
    ErrorReason["ParameterCannPlacedAfterOptional"] = "required parameter is not placed after optional parameter";
    ErrorReason["UnknownOption"] = "unknown option";
    ErrorReason["OptionNameMismatch"] = "short or long option name mismatch";
    ErrorReason["OptionValueRequired"] = "option value required";
})(ErrorReason = exports.ErrorReason || (exports.ErrorReason = {}));
class CommandpostError {
    constructor(params) {
        this.params = params;
        Error.captureStackTrace(this, this.constructor);
    }
    get name() {
        return this.constructor.name;
    }
    get message() {
        return this.params.message;
    }
}
exports.CommandpostError = CommandpostError;
util.inherits(CommandpostError, Error);
//# sourceMappingURL=error.js.map