"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var structured_source_1 = __importDefault(require("structured-source"));
var fs = __importStar(require("fs"));
var path = __importStar(require("path"));
var Asciidoctor = require("asciidoctor");
var asciidoctor = Asciidoctor();
var getState = function (attributes) {
    var state = attributes["doctest-state"] || attributes["doctest"];
    if (!state) {
        return "none";
    }
    if (/enable(d)?/.test(state)) {
        return "enabled";
    }
    else if (/disable(d)?/.test(state)) {
        return "disabled";
    }
    return "none";
};
var getExpectedError = function (attributes) {
    var error = attributes["doctest-error"] || attributes["doctest"];
    if (!error) {
        return;
    }
    var pattern = /(\w+Error)/;
    var match = error.match(pattern);
    if (match && match[1]) {
        return match[1];
    }
    return;
};
var getMeta = function (attributes) {
    var meta = attributes["doctest-meta"];
    if (!meta) {
        return;
    }
    try {
        return JSON.parse(meta);
    }
    catch (error) {
        // parse error
        throw new Error("Can not parsed. doctest-meta={...} should be JSON object: " + error);
    }
};
var getOptions = function (attributes) {
    var meta = attributes["doctest-options"];
    if (!meta) {
        return;
    }
    try {
        return JSON.parse(meta);
    }
    catch (error) {
        // parse error
        throw new Error("Can not parsed. doctest-options={...} should be JSON object: " + error);
    }
};
// inlining include::
var inlineCode = function (code, baseFilePath) {
    // include:: -> link:
    var pattern = /link:(.+)\[.*?]/;
    var dirName = path.dirname(baseFilePath);
    return code.replace(pattern, function (all, filePath) {
        var fileName = path.resolve(dirName, filePath);
        if (fs.existsSync(fileName)) {
            return fs.readFileSync(fileName, "utf-8");
        }
        return all;
    });
};
function parse(args) {
    var structuredSource = new structured_source_1.default(args.content);
    var doc = asciidoctor.load(args.content);
    return doc.getBlocks()
        .filter(function (block) {
        var attributes = block.getAttributes();
        return attributes.style === "source" && (attributes.language === "js" || attributes.language === "javascript");
    })
        .map(function (block) {
        // FIXME: workaround get lineno
        // asciidoctor.js does not suport lineno for the block
        var code = block.getSource();
        var index = args.content.indexOf(code);
        var startPosition = structuredSource.indexToPosition(index);
        var endPostion = structuredSource.indexToPosition(index + code.length);
        var attributes = block.getAttributes();
        var meta = getMeta(attributes);
        var doctestOptions = getOptions(attributes);
        var parsedCode = {
            code: inlineCode(code, args.filePath),
            state: getState(attributes),
            expectedError: getExpectedError(attributes),
            location: {
                start: startPosition,
                end: endPostion
            },
            metadata: meta,
            doctestOptions: doctestOptions ? __assign({ filePath: args.filePath }, doctestOptions) : {
                filePath: args.filePath
            }
        };
        return parsedCode;
    });
}
exports.parse = parse;
//# sourceMappingURL=index.js.map