// LICENSE : MIT
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var parser_1 = require("@babel/parser");
var core_1 = require("@babel/core");
var generator_1 = __importDefault(require("@babel/generator"));
var assert_1 = __importDefault(require("assert"));
var comment_to_assert_1 = require("comment-to-assert");
var inject_assert_1 = require("./inject-assert");
var babelPluginEspower = require("babel-plugin-espower");
/**
 * Convert Code to Code
 * @param code
 * @param options
 */
function convertCode(code, options) {
    var AST = parser_1.parse(code, __assign({ sourceType: "module" }, options.babel ? options.babel : {}));
    var output = convertAST(AST, {
        assertBeforeCallbackName: options.assertBeforeCallbackName,
        assertAfterCallbackName: options.assertAfterCallbackName,
        filePath: options.filePath
    });
    return generator_1.default(output, {
        comments: true
    }).code;
}
exports.convertCode = convertCode;
/**
 * Convert AST to AST
 * @param AST
 * @param options
 */
function convertAST(AST, options) {
    var boundEspower = function (AST) {
        // FIXME: AST to AST
        var code = generator_1.default(AST, {
            comments: true
        }).code;
        var result = core_1.transformSync(code, {
            plugins: [babelPluginEspower],
            filename: options.filePath,
            sourceFileName: options.filePath,
            ast: true,
            code: false,
            configFile: false,
            babelrc: false,
            sourceType: "module"
        });
        if (!result) {
            throw new Error("Fail to convert espower in power-doctest");
        }
        return result.ast;
    };
    var commentToAssert = function (AST) {
        return comment_to_assert_1.toAssertFromAST(AST, options);
    };
    var modifyMapFunctionList = [commentToAssert, inject_assert_1.injectAssertModule, boundEspower];
    return modifyMapFunctionList.reduce(function (AST, modify, index) {
        var result = modify(AST);
        assert_1.default(result != null, modifyMapFunctionList[index].name + " return wrong result. result: " + result);
        return result;
    }, AST);
}
exports.convertAST = convertAST;
//# sourceMappingURL=power-doctest.js.map