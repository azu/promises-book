"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var structured_source_1 = __importDefault(require("structured-source"));
var getState = function (code) {
    if (/\/\/\s*doctest-disable(d)?/.test(code)) {
        return "disabled";
    }
    else if (/\/\/\s*doctest-enable(d)?/.test(code)) {
        return "enabled";
    }
    return "none";
};
var getExpectedError = function (code) {
    var pattern = /\/\/\s*doctest-error:\s*(\w+Error)/;
    var match = code.match(pattern);
    if (match && match[1]) {
        return match[1];
    }
    return;
};
var getMeta = function (code) {
    var pattern = /\/\/\s*doctest-meta:{(.*)}/;
    var match = code.match(pattern);
    var metaString = match && match[1];
    if (!metaString) {
        return;
    }
    try {
        return JSON.parse(metaString);
    }
    catch (error) {
        // parse error
        throw new Error("Can not parsed. // doctest-meta:{...} should be JSON object: " + error);
    }
};
var getOptions = function (code) {
    var pattern = /\/\/\s*doctest-options:{(.*)}/;
    var match = code.match(pattern);
    var metaString = match && match[1];
    if (!metaString) {
        return;
    }
    try {
        return JSON.parse(metaString);
    }
    catch (error) {
        // parse error
        throw new Error("Can not parsed. // doctest-options:{...} should be JSON object: " + error);
    }
};
exports.parse = function (_a) {
    var content = _a.content, filePath = _a.filePath;
    var source = new structured_source_1.default(content);
    var meta = getMeta(content);
    var options = getOptions(content);
    return [
        {
            code: content,
            location: {
                start: source.indexToPosition(0),
                end: source.indexToPosition(content.length - 1)
            },
            state: getState(content),
            expectedError: getExpectedError(content),
            metadata: meta,
            doctestOptions: options
                ? __assign({ filePath: filePath }, options) : {
                filePath: filePath
            }
        }
    ];
};
//# sourceMappingURL=index.js.map