{"version":3,"sources":["../src/textlint-rule-eslint.js"],"names":["path","require","Source","CLIEngine","defaultOptions","getConfigBaseDir","context","textlintRcFilePath","config","configFile","dirname","process","cwd","reporter","options","Syntax","RuleError","report","fixer","getSource","Error","availableLang","langs","textlintRCDir","ESLintOptions","resolve","engine","CodeBlock","node","indexOf","lang","raw","code","getUntrimmedCode","source","resultLinting","executeOnText","errorCount","results","forEach","result","messages","message","ignoreParsingErrors","includes","prefix","ruleId","fix","fixedRange","range","fixedText","text","sourceBlockDiffIndex","value","fixedWithPadding","index","positionToIndex","line","column","adjustedIndex","replaceTextRange","type","startsWith","endsWith","lines","split","codeLines","slice","length","join","module","exports","linter"],"mappings":"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","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst path = require(\"path\");\nconst Source = require(\"structured-source\");\nconst CLIEngine = require(\"eslint\").CLIEngine;\nconst defaultOptions = {\n    // path to .eslintrc file\n    \"configFile\": null,\n    // recognize lang of CodeBlock\n    \"langs\": [\"js\", \"javascript\", \"node\", \"jsx\"]\n};\nconst getConfigBaseDir = (context) => {\n    if (typeof context.getConfigBaseDir === \"function\") {\n        return context.getConfigBaseDir();\n    }\n    // Fallback that use deprecated `config` value\n    // https://github.com/textlint/textlint/issues/294\n    const textlintRcFilePath = context.config ? context.config.configFile : null;\n    // .textlinrc directory\n    return textlintRcFilePath ? path.dirname(textlintRcFilePath) : process.cwd();\n};\n\nconst reporter = (context, options) => {\n    const { Syntax, RuleError, report, fixer, getSource } = context;\n    if (!options.configFile) {\n        throw new Error(`Require options: { \"configFile\": \"path/to/.eslintrc\" }`);\n    }\n    const availableLang = options.langs || defaultOptions.langs;\n    const textlintRCDir = getConfigBaseDir(context);\n    const ESLintOptions = {\n        configFile: path.resolve(textlintRCDir, options.configFile)\n    };\n    const engine = new CLIEngine(ESLintOptions);\n    return {\n        [Syntax.CodeBlock](node) {\n            if (availableLang.indexOf(node.lang) === -1) {\n                return;\n            }\n            const raw = getSource(node);\n            const code = getUntrimmedCode(node, raw);\n            const source = new Source(code);\n            const resultLinting = engine.executeOnText(code, node.lang);\n            if (resultLinting.errorCount === 0) {\n                return;\n            }\n            const results = resultLinting.results;\n            results.forEach(result => {\n                result.messages.forEach(message => {\n                    /*\n\n                     1. ```js\n                     2. CODE\n                     3. ```\n\n                     ESLint message line and column start with 1\n                     */\n                    if (options.ignoreParsingErrors && message.message.includes(\"Parsing error\")) {\n                        return;\n                    }\n\n                    const prefix = message.ruleId ? `${message.ruleId}: ` : \"\";\n                    if (message.fix) {\n                        const fixedRange = message.fix.range;\n                        const fixedText = message.fix.text;\n                        const sourceBlockDiffIndex = (raw !== node.value) ? raw.indexOf(code) : 0;\n                        const fixedWithPadding = [fixedRange[0] + sourceBlockDiffIndex, fixedRange[1] + sourceBlockDiffIndex];\n                        const index = source.positionToIndex({\n                            line: message.line,\n                            column: message.column\n                        });\n                        const adjustedIndex = index + sourceBlockDiffIndex - 1;\n                        report(node, new RuleError(`${prefix}${message.message}`, {\n                            index: adjustedIndex,\n                            fix: fixer.replaceTextRange(fixedWithPadding, fixedText)\n                        }));\n                    } else {\n                        const sourceBlockDiffIndex = (raw !== node.value) ? raw.indexOf(code) : 0;\n                        const index = source.positionToIndex({\n                            line: message.line,\n                            column: message.column\n                        });\n                        const adjustedIndex = index + sourceBlockDiffIndex - 1;\n                        report(node, new RuleError(`${prefix}${message.message}`, {\n                            index: adjustedIndex\n                        }));\n                    }\n\n                });\n            });\n        }\n    }\n};\n\n/**\n * [Markdown] get actual code value from CodeBlock node\n * @param {Object} node\n * @param {string} raw raw value include CodeBlock syntax\n * @returns {string}\n */\nfunction getUntrimmedCode(node, raw) {\n    if (node.type !== \"CodeBlock\") {\n        return node.value\n    }\n    // Space indented CodeBlock that has not lang\n    if (!node.lang) {\n        return node.value;\n    }\n\n    // If it is not markdown codeBlock, just use node.value\n    if (!(raw.startsWith(\"```\") && raw.endsWith(\"```\"))) {\n        if (node.value.endsWith(\"\\n\")) {\n            return node.value\n        }\n        return node.value + \"\\n\";\n    }\n    // Markdown(remark) specific hack\n    // https://github.com/wooorm/remark/issues/207#issuecomment-244620590\n    const lines = raw.split(\"\\n\");\n    // code lines without the first line and the last line\n    const codeLines = lines.slice(1, lines.length - 1);\n    // add last new line\n    // \\n```\n    return codeLines.join(\"\\n\") + \"\\n\";\n}\n\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};\n"],"file":"textlint-rule-eslint.js"}