// LICENSE : MIT
"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert = __importStar(require("assert"));
var types_1 = require("@babel/types");
var template_1 = __importDefault(require("@babel/template"));
var commentCodeRegExp = /=>\s*?(.*?)$/i;
function tryGetCodeFromComments(comments) {
    if (comments.length === 0) {
        return;
    }
    var comment = comments[0];
    if (comment.type === "CommentBlock" || comment.type === "CommentLine") {
        var matchResult = comment.value.match(commentCodeRegExp);
        if (matchResult && matchResult[1]) {
            return matchResult[1];
        }
    }
    return;
}
exports.tryGetCodeFromComments = tryGetCodeFromComments;
function isConsole(node) {
    return types_1.isCallExpression(node) && node.callee.object && node.callee.object.name === "console";
}
exports.ERROR_COMMENT_PATTERN = /^([a-zA-Z]*?Error)/;
exports.PROMISE_RESOLVE_COMMENT_PATTERN = /^Resolve:\s*(.*?)\s*$/;
exports.PROMISE_REJECT_COMMENT_PATTERN = /^Reject:\s*(.*?)\s*$/;
function wrapAssert(_a, options) {
    var actualNode = _a.actualNode, expectedNode = _a.expectedNode, commentExpression = _a.commentExpression, id = _a.id;
    assert.notStrictEqual(typeof expectedNode, "undefined");
    var ACTUAL_NODE = actualNode;
    var EXPECTED_NODE = expectedNode;
    var BEFORE_CALLBACK = options.assertBeforeCallbackName
        ? types_1.callExpression(types_1.identifier(options.assertBeforeCallbackName), [types_1.stringLiteral(id)])
        : undefined;
    var AFTER_CALLBACK = options.assertAfterCallbackName
        ? types_1.callExpression(types_1.identifier(options.assertAfterCallbackName), [types_1.stringLiteral(id)])
        : undefined;
    if (isConsole(actualNode)) {
        var args = actualNode.arguments;
        var firstArgument = args[0];
        return wrapAssert({
            actualNode: firstArgument,
            expectedNode: expectedNode,
            commentExpression: commentExpression,
            id: id
        }, options);
    }
    else if (types_1.isIdentifier(expectedNode) && exports.ERROR_COMMENT_PATTERN.test(expectedNode.name)) {
        return template_1.default(templateObject_1 || (templateObject_1 = __makeTemplateObject(["BEFORE_CALLBACK;assert.throws(function() {\n                    ACTUAL_NODE\n               });AFTER_CALLBACK;"], ["BEFORE_CALLBACK;assert.throws(function() {\n                    ACTUAL_NODE\n               });AFTER_CALLBACK;"])))({
            BEFORE_CALLBACK: BEFORE_CALLBACK,
            AFTER_CALLBACK: AFTER_CALLBACK,
            ACTUAL_NODE: ACTUAL_NODE
        });
    }
    else if (expectedNode.type === "Resolve") {
        // getExpressionNodeFromCommentValue define the type
        var ARGS = isConsole(actualNode) ? actualNode.arguments[0] : actualNode;
        return template_1.default(templateObject_2 || (templateObject_2 = __makeTemplateObject(["Promise.resolve(ARGS).then(v => {\n            ", "\n            return v;\n        });"], ["Promise.resolve(ARGS).then(v => {\n            ",
            "\n            return v;\n        });"])), wrapAssert({
            actualNode: { type: "Identifier", name: "v" },
            expectedNode: expectedNode.node,
            commentExpression: commentExpression,
            id: id
        }, options))({
            ARGS: ARGS
        });
    }
    else if (expectedNode.type === "Reject") {
        var ARGS = isConsole(actualNode) ? actualNode.arguments[0] : actualNode;
        return template_1.default(templateObject_3 || (templateObject_3 = __makeTemplateObject(["BEFORE_CALLBACK;assert.rejects(ARGS).then(() => {\n        AFTER_CALLBACK;\n});"], ["BEFORE_CALLBACK;assert.rejects(ARGS).then(() => {\n        AFTER_CALLBACK;\n});"])))({
            BEFORE_CALLBACK: BEFORE_CALLBACK,
            AFTER_CALLBACK: AFTER_CALLBACK,
            ARGS: ARGS
        });
    }
    else if (types_1.isIdentifier(expectedNode) && expectedNode.name === "NaN") {
        return template_1.default(templateObject_4 || (templateObject_4 = __makeTemplateObject(["BEFORE_CALLBACK;assert.ok(isNaN(ACTUAL_NODE));AFTER_CALLBACK;"], ["BEFORE_CALLBACK;assert.ok(isNaN(ACTUAL_NODE));AFTER_CALLBACK;"])))({
            BEFORE_CALLBACK: BEFORE_CALLBACK,
            AFTER_CALLBACK: AFTER_CALLBACK,
            ACTUAL_NODE: ACTUAL_NODE
        });
    }
    else if (types_1.isNullLiteral(expectedNode)) {
        return template_1.default(templateObject_5 || (templateObject_5 = __makeTemplateObject(["BEFORE_CALLBACK;assert.strictEqual(ACTUAL_NODE, null);AFTER_CALLBACK;"], ["BEFORE_CALLBACK;assert.strictEqual(ACTUAL_NODE, null);AFTER_CALLBACK;"])))({
            BEFORE_CALLBACK: BEFORE_CALLBACK,
            AFTER_CALLBACK: AFTER_CALLBACK,
            ACTUAL_NODE: ACTUAL_NODE
        });
    }
    else if (types_1.isIdentifier(expectedNode) && expectedNode.name === "undefined") {
        return template_1.default(templateObject_6 || (templateObject_6 = __makeTemplateObject(["BEFORE_CALLBACK;assert.strictEqual(ACTUAL_NODE, undefined);AFTER_CALLBACK"], ["BEFORE_CALLBACK;assert.strictEqual(ACTUAL_NODE, undefined);AFTER_CALLBACK"])))({
            BEFORE_CALLBACK: BEFORE_CALLBACK,
            AFTER_CALLBACK: AFTER_CALLBACK,
            ACTUAL_NODE: ACTUAL_NODE
        });
    }
    else if (types_1.isLiteral(expectedNode)) {
        // Handle Directive Prorogue as string literal
        if (types_1.isDirective(ACTUAL_NODE)) {
            return template_1.default(templateObject_7 || (templateObject_7 = __makeTemplateObject(["BEFORE_CALLBACK;assert.strictEqual(ACTUAL_NODE, EXPECTED_NODE);AFTER_CALLBACK;"], ["BEFORE_CALLBACK;assert.strictEqual(ACTUAL_NODE, EXPECTED_NODE);AFTER_CALLBACK;"])))({
                BEFORE_CALLBACK: BEFORE_CALLBACK,
                AFTER_CALLBACK: AFTER_CALLBACK,
                ACTUAL_NODE: ACTUAL_NODE.value.extra.raw,
                EXPECTED_NODE: EXPECTED_NODE
            });
        }
        else {
            return template_1.default(templateObject_8 || (templateObject_8 = __makeTemplateObject(["BEFORE_CALLBACK;assert.strictEqual(ACTUAL_NODE, EXPECTED_NODE);AFTER_CALLBACK;"], ["BEFORE_CALLBACK;assert.strictEqual(ACTUAL_NODE, EXPECTED_NODE);AFTER_CALLBACK;"])))({
                BEFORE_CALLBACK: BEFORE_CALLBACK,
                AFTER_CALLBACK: AFTER_CALLBACK,
                ACTUAL_NODE: ACTUAL_NODE,
                EXPECTED_NODE: EXPECTED_NODE
            });
        }
    }
    else {
        return template_1.default(templateObject_9 || (templateObject_9 = __makeTemplateObject(["BEFORE_CALLBACK;assert.deepStrictEqual(ACTUAL_NODE, EXPECTED_NODE);AFTER_CALLBACK;"], ["BEFORE_CALLBACK;assert.deepStrictEqual(ACTUAL_NODE, EXPECTED_NODE);AFTER_CALLBACK;"])))({
            BEFORE_CALLBACK: BEFORE_CALLBACK,
            AFTER_CALLBACK: AFTER_CALLBACK,
            ACTUAL_NODE: ACTUAL_NODE,
            EXPECTED_NODE: EXPECTED_NODE
        });
    }
    throw new Error("Unknown pattern: " + actualNode);
}
exports.wrapAssert = wrapAssert;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9;
//# sourceMappingURL=ast-utils.js.map